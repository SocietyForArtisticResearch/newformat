#+TITLE:       RC Exposition Format -- Fundamental Points
#+AUTHOR:      DÃ¶bereiner and Schipper
#+DATE:        October/November 2019
#+OPTIONS: toc:nil        

* Exposition Data Structure

An RC exposition consists of /data/ (media/text) that is structured
according to an /ontology/. This structured data object is displayed
using a /renderer/ function. By following linked data and semantic web
standards, this tripartite design creates the basis for a
programmable, sustainable and flexible data architecture that can be
consumed and queried by human and non-human actors.

** Data  :Casper:

External data is represented in the RC format as data objects.

Examples of data objects:

- video/image/audio files
- text (plain text, Markdown, Microsoft Word, Open/Libre Office,
  LaTeX, html, pdf)
- online resources and definitions (identified by a public URL) 
- bibliography (bibTex, ISBN, DOI) 
- meta-data description of real world event, object or process ("works")
- ?? data CSV/json/xml

Data objects can have relationships with each other
(see ontology). All data objects within an exposition can be searched 
and organized according to categories. Each object has a DOI and is accessible 
through a unique URL that displays the object content and its metadata. 
The independence of the individual objects makes it possible to reuse data 
objects in other expositions or online publications. The copyright and 
licensing works can be controlled on the level of individual objects as well.


(part of ontology?)
*** Objects can have position properties (next/under/above/within/on top/absolute)
*** Objects can have a property that orders them
*** Objects can have temporalized knowledge
*** Objects can be representations of real-world events/objects/works, give a uri to an art work (idea of "work")

** Ontology  :Luc:
In order to turn the exposition into a structured data object, the
possibilities of this structure need to be /modeled/. This extensible
model is to be expressed in terms of a /web ontology/ in the Web
Ontology Language (OWL)[fn:1]. Instead of limiting relations among
data to their immediate visual presentation, an exposition will be
modeled as a set of relations among distributed data. Following linked
data principles the properties, possible relations and types of data
(and metadata) of expositions and their components will be formally
specified in terms of vocabularies and ontologies, which will be
versioned and publicly accessible. In addition, expositions can create
specific properties and relations as supersets of the fundamental RC
exposition ontology.

The RC exposition can thus be understood as a queryable data
object. Queries can refer to any specified properties and their
relations. This allows for filtering, gathering and linking of
information from one or more expositions allowing for the creation of
"meta-expositions" which can be comprised of information from a
variety of sources. Any visual representation can be seen as a
specific query.

This new level of describing and linking data must be accompanied by
the development of an publicly accessible database and respective
API. By allowing the updating, creation and uploading of media entries
and expositions, this API will form the foundation for front-end
editors and rendering engines but will also facilitate the connection
to external institutions. The "work" feature will also be overhauled
in this context and turned into a media set and/or a resource
describing a "real-world" event or object.

The formalization of the exposition format by means of OWL/RDF[fn:2]
renders relations among objects explicit and thus independent of
specific visual constraints or layouts. However, a visual layout or
proximity may itself be one of many relations among objects. The
specification of an RC expositions as a set of structured relations
among distributed data liberates it from ties to specific formats
(such as HTML) and thus vastly increases long term accessibility and
findability. In doing so, the RC exposition will accommodate multiple
layers of relations, such as temporal and visual ones, that may be
impossible to render simultaneously. Moreover, it allows for
validation and automatic consistency checks.

** Renderers :Luc:
Renderers turn the data and their relations into digital media objects
for human consumption. While there is only one (extensible) RC
ontology there can be any number of renderers. HTML will be generated
in at least two forms: absolutely-positioned (graphical exposition)
and grid-based (responsive). Standard file formats such as PDF, SVG,
Epub etc. will be created. These should make it possible to turn the
networked and distributed exposition into a static and autonomous
object. Moreover, time-based formats and displays for visually
impaired may be generated. It is important that each format may only
those properties and relations of the exposition that can be displayed
in its medium.

* Reading process :Luc:
The reading (here understood in an extended sense) of expositions will
be transformed by enhancing navigation and exploration tools. Having
relations and properties explicitly specified allows for the
exposition to experienced in a multiplicity of ways: It can be
searched, filtered, rearranged according to criteria, queried,
embedded and linked to external resources. New navigation tools will
developed that extend the current outline overview and show both
visual and semantic representations of connections, paths and
groupings within the text and media data constituting the
expositions. Certain queries and paths through the data can be seen as
curated ways of exhibiting media objects.

Moreover, the reading process will more strongly affect the exposition
itself. Collective note taking and discussions relating to particular
elements of an exposition will be made possible in order develop the
specific social potential of reading digital publications.

* Writing process :Casper:

The construction of an exposition starts with the author collecting /data/. 
What follows is the translation of the data objects and their interrelationships 
into a structured digital object. To assist this process, the editor has various 
modes to view the objects and edit the network of relationships. The more metadata 
added by the author about the objects, the richer the views will become in terms of structure. 

Examples of editor modes include: 

- (mind)map 
- list  
- graph/tree [fn:3]
- text 
- layout 

The associated view and type of relationships that are editable are constrained by the mode of the editor. 
The network of relations between objects can also be directly edited in the text 
serialization of the format. 

For the final digital object, the author can choose how much they want to "fix" the
final layout structure: either it is completely fixed (the equivalent
of the older graphical format), or it is left more free, where the
final layout may depend on the view method and actions of the reader.

** Object/Text organization/relation before visual placement
** No waste in actions of user. Recording/effect on meaning

** constructing rhetorical structures from data by hand (editor should assist)
** generating paths, skeleton (diagram language)

** editing content in the exposition format should be transparent enough that it can be done by hand

* Footnotes

[fn:3]https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)

[fn:2]https://www.w3.org/RDF/ 

[fn:1]https://www.w3.org/OWL/ 
