openapi: 3.0.0
info:
  description: The Research Catalouge Media Repository API
  version: "1.0.0-oas3"
  title: Media Repository API
  contact:
    email: support@researchcatalogue.net
  license:
    name: GPL-3
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: Operations for the users
  - name: service
    description: Operation for external services
paths:
  /media:
    post:
      tags:
        - user
      summary: Post a new media record. The file needs to be uploaded separately.
      operationId: postMedia
      description: Upload a media file, providing the required fields returns the id of the media. A ShareStatus object is created automatically for this media record. 
      responses: 
        '201':
          description: successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRecord'
        '400':
          description: incorrect request
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaRecord'
   
  /media/{mediaId}:
    put:
      tags:
        - user
      summary: Update a media record
      description: |
        Every time the text of a media record is edited or created, the markdown has to be parsed to recompute relationships
        between that markdown and the media records it references through !{} notation.
      operationId: putMedia
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaRecord'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRecord'
        '400':
          description: Incorrect request
          
        '404':
          description: Media record not found
    get:
      tags:
        - user
      summary: get media record
      operationId: getMedia
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      responses:
        '201':
          description: media record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRecord'
        '404':
          description: media record not found
    delete:
      summary: delete media record
      tags:
        - user
      description: Deletes a media record and also the respective share status object. 
        It cannot be deleted if media record is used in exposition. Connections to other entities should be removed.
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      responses:
        '202':
          description: Media record deleted
        '409':
          description: Media record is used in one or more expositions
          content:
            application/json:
              schema:
                type: array
                items:
                  description: Exposition ids
                  type: string
        '404':
          description: media record not found
        
    
  /media/{mediaId}/children:
    get:
      tags:
        - user
      summary: get the children of a media record
      operationId: getMediaChildren
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      responses:
        '200':
          description: array of children media records
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/MediaRecord'
        '404':
          description: media record not found
          
  /media/{mediaId}/shareStatus:
    get:
      tags:
        - user
      summary: get the share status of a media record
      operationId: getShareStatus
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      responses:
        '200':
          description: share status of the media record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareStatus'
        '404':
          description: media record not found
    put:
      tags:
        - user
      summary: put the share status of a media record
      operationId: putShareStatus
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareStatus'
      responses:
        '200':
          description: share status of the media record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareStatus'
        '404':
          description: media record not found

  /media/search:
    post:
      tags:
        - user
      summary: Search for media records using the search filter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: list of media records
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/MediaRecord'
        
          
  /media/index:
    get:
      tags: 
        - user
      summary: Get all media records accessible to the user
      description: | 
        Get all media accessible to user based on id. User is is derived from token.
      operationId: getMediaIndex
      responses:
        '200':
          description: list of media records
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/MediaRecord'

  /media/index/public:
    get:
        tags: 
          - service
        summary: Get all publicly available media records. May produce large amounts of data.
        operationId: getPublicMediaIndex
        responses:
          '200':
            description: array of children media records
            content:
              application/json:
                schema:
                  type: array 
                  items:
                    $ref: '#/components/schemas/MediaRecord'

  /media/{mediaId}/thumb:
    get:
      tags:
        - user
      summary: Get the preview thumbnail of the media record. All media records have a default thumb.
      operationId: getMediaThumb
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      responses:
        '200':
          description: Thumbnail in PNG format
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: media record not found    
    put:
      tags:
        - user
      summary: Replace tge preview thumbail image.
      operationId: putMediaThumb
      parameters: 
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        required: true        
        content:
            image/*:
              schema:
                type: string
                format: binary
      responses:
        '201':
          description: Thumbnail updated
        '404':
          description: media record not found
          
  /media/{mediaId}/file:
      get:
        tags:
          - user
        summary: Get the file of a media record. Will not return a file if the media record is a text object.
        operationId: getMediaFile
        parameters: 
          - $ref: '#/components/parameters/mediaId'
        responses:
          '200':
            description: The url of a media file of the media record
            content:
              application/json:
                schema: 
                  type: string
          '400':
            description: No media file associated with the media record.
          '404':
            description: Media record not found    
                  
      put:
        tags:
          - user
        summary: Upload media file of media record or replace it if it already exists.
        operationId: putMediaFile
        parameters: 
          - $ref: '#/components/parameters/mediaId'
        requestBody:
          required: true        
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                    file:
                        type: string
                        format: binary
        responses:
          '201':
            description: Media file updated
          '404':
            description: media record not found  
  /media/{mediaId}/connections:
      get:
        tags:
          - user
        summary: Get all connections for which this record is the subject or the object
        operationId: getConnections
        parameters: 
          - $ref: '#/components/parameters/mediaId'
        responses:
          '200':
            description: List of connections
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Connection'
          '404':
            description: media record not found 
  
  /connection:
      post:
        tags:
          - user
        summary: Create a connection. The requester needs to have write permission for the subject entity and write or read permission for the object.
        operationId: postConnection
        requestBody:
          required: true        
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Connection'
        responses:
          '201':
            description: The connection has been created.
          '400':
            description: Connection could not be created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemWithRCObject'
  /connection/{connectionId}:
      put:
        tags:
          - user
        summary: Update a connection
        operationId: putConnection
        parameters:
          - name: connectionId
            in: path
            required: true
            description: id of a connection
            schema:
              type: string
        requestBody:
          required: true        
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Connection'
        responses:
          '200':
            description: The connection has been updated.
          '400':
            description: Connection could not be updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemWithRCObject'
      delete:
          tags:
            - user
          summary: Delete a connection
          operationId: deleteConnection
          parameters:
            - name: connectionId
              in: path
              required: true
              description: id of a connection
              schema:
                type: string
          responses:
            '202':
                description: Connection deleted
            '404':
                description: Connection not found
  /predicates:
      get:
        tags:
          - user
        summary: Return all defined predicates
        operationId: getPredicates
        responses:
          '200':
            description: An array of predicates.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Predicate'
      post:
        tags:
          - admin
        summary: Define a new predicate.
        operationId: postPredicate
        requestBody:
          required: true        
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Predicate'
        responses:
          '201':
            description: Predicate created. Returns a predicate with id.
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Predicate' 
  /predicates/{predicateId}:
      put:
        tags:
          - admin
        summary: Update an existing predicate.
        operationId: putPredicate
        parameters:
              - name: predicateId
                in: path
                required: true
                description: id of a predicate
                schema:
                  type: string
        requestBody:
            required: true        
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Predicate'
        responses:
          '200':
            description: Predicate was successfully updated.
      delete:
        tags:
          - admin
        summary: Delete an existing predicate.
        operationId: deletePredicate
        parameters:
              - name: predicateId
                in: path
                required: true
                description: id of a predicate
                schema:
                  type: string
        responses:
          '202':
            description: Predicate was successfully deleted.
          '404':
            description: Predicate not found.
  /licenses:
    get:
      summary: Get all licenses
      description: Licenses are retrieved from 'https://voc.uni-ak.ac.at/skosmos/licenses/en/page/?uri=http://base.uni-ak.ac.at/portfolio/licenses/CC-BY-NC-SA-4.0'
      tags:
        - user
      operationId: getLicenses
      responses:
        '200':
          description: array of licenses
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/License'

  /keywords/closed:
    get:
      summary: Get closed vocabulary keywords
      tags:
        - user
      operationId: getKeywordsClosed
      responses:
        '200':
          description: array of vocabulary terms
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/VocabularyTerm'
    post:
      summary: create a new keyword
      tags:
        - admin
      operationId: postKeywordsClosed
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VocabularyTerm'
      responses:
        '201':
          description: returns a vocabulary term with an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyTerm'
        '400':
          description: bad request, cannot create keyword
  
                  
  /keywords/closed/{keywordId}:
    put:
      summary: update a keyword
      tags:
        - admin
      operationId: putKeywordsClosed
      parameters:
       - name: keywordId
         in: path
         required: true
         description: id of keyword
         schema:
          type: string
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VocabularyTerm'
      responses:
        '200':
          description: keyword updated
        '404':
          description: keyword closed vocabulary not found
    delete:
      summary: Delete a keyword. Backend needs to delete all uses of it.
      tags:
        - admin
      operationId: deleteKeywordsClosed
      parameters:
       - name: keywordId
         in: path
         required: true
         description: id of keyword
         schema:
          type: string
      responses:
        '202':
          description: keyword deleted
        '404':
          description: keyword closed vocabulary not found

          
  /keywords/open:
    get:
      summary: Get open vocabulary keywords, starting with a given string
      tags:
        - user
      operationId: getKeywordsOpen
      parameters:
       - in: query
         name: startingWith
         schema: 
           type: string
         description: filter keywords using this string as start
       - in: query
         name: limit
         schema:
           type: integer
         description: maximum number of keywords to return.
      responses:
        '200':
          description: array of open vocabulary terms
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/OpenVocabularyTerm'
    post:
      summary: add a keyword to the open vocabulary
      tags:
        - user
      operationId: postKeywordsOpen
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              type: string
        description: keyword as string
      responses:
        '200':
          description: created keyword including id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVocabularyTerm' 

  /keywords/open/{openKeywordId}:
      delete:
        summary: deletes a keyword from the open vocabulary (case insensitive)
        tags:
          - user
        operationId: deleteKeywordsOpen
        parameters: 
          - name: openKeywordId
            in: path
            required: true
            description: id of keyword
            schema:
              type: string
        responses:
          '202':
            description: keyword successfully deleted from open vocabulary
          '404':
            description: keyword not found in open vocabulary
            
  /tags:
      get:
        summary: |
          Get users tags, the user has a set of personal tags
          user is identified from header
        tags:
          - user
        operationId: getTags
        responses:
          '200':
            description: array of tags
            content:
              application/json:
                schema:
                  type: array 
                  items:
                    $ref: '#/components/schemas/OpenVocabularyTerm'
      post:
        summary: | 
          Add a tag to the users personal list of tags.
          User is identified from header.
        tags:
          - user
        operationId: postTag
        requestBody:
          required: true        
          content:
            application/json:
              schema:
                type: string
          description: tag as string
        responses:
          '200':
            description: created tag including id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OpenVocabularyTerm' 
  /tags/{tagId}:
      delete:
        summary: | 
          Deletes a tag from the user's list of tags.
          User is identified from header
        tags:
          - user
        operationId: deleteTag
        parameters: 
          - name: tagId
            in: path
            required: true
            description: id of tag
            schema:
              type: string
        responses:
          '202':
            description: tag successfully deleted from users tag list
          '404':
            description: tag not found in users tag list
            
          
  /types:
    get:
      summary: Gets the id's of type schemas
      tags:
        - user
      operationId: getTypes
      responses:
        '200':
          description: this is the array of type schema id's
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type : string 

  /types/schema/{schemaId}:
    get:
      summary: get the schema of a type
      tags:
        - user
      operationId: getTypesSchema
      parameters:
        - name: schemaId
          in: path
          required: true
          description: id of schema
          schema: 
            type: string
      responses:
        '200':
          description: free form schema specification, dealt with in client
          content:
            application/json:
              schema:
                type: object
                    
  /media/{mediaId}/import/doc:
    put:
      summary: |
        Import a text document file (word, odt etc..). 
        The document is converted using Pandoc, which results in text and a subfolder of media.
        Text is appended to the end of any existing text in the given media record.

        Example:
        v text media record (text converted to markdown) has the following children:
            - illustration1.jpg
            - illustration2.jpg
            - illustration3.jpg
        The position of the media is signaled by using the !{name} tokens in the Markdown, and reflected in the connections metadata. The client needs to maintain the pointers in the connections.
      tags:
        - user
      operationId: putMediaImportDoc
      parameters:
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        required: true
        content:
            multipart/form-data:
              schema:
                type: object
                properties:
                    file:
                      type: string
                      format: binary
      responses: 
        '201':
          description: successful import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRecord'
        '400':
          description: incorrect 
          
  /media/{mediaId}/import/folder:
    put:
      summary: |
        Import multiple files at once (flat list, no hierarchy).
        Copyright and license inherited from parent.
      tags:
        - user
      operationId: putMediaImportFolder
      parameters:
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses: 
        '201':
          description: successful import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRecord'
        '400':
          description: incorrect request
          
    
  /storage/usage:
    get:
      summary: Get the current storage usage of user.
      tags:
       - user
      operationId: getStorageUsage
      responses:
        '200':
          description: usage report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageUsage'

  /text-editor/{expositionId}:
    get:
      summary: Get a text-based exposition
      tags:
        - user
      operationId: getTextExposition
      parameters:
        - $ref: '#/components/parameters/expositionId'
      responses:
        '200':
          description: Text-based exposition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextExposition'
        '404':
          description: Exposition not found
    put:
      summary: Save text-based exposition
      tags:
        - user
      operationId: putTextExposition
      parameters:
        - $ref: '#/components/parameters/expositionId'
      requestBody:
        required: true        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextExposition'
      responses:
        '201':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextExposition'
        '400':
          description: Incorrect request
          
        '404':
          description: Exposition not found
  /text-editor/page/{expositionId}:
    post:
      summary: Create a new empty page. There is no request body as pages are saved with the exposition.
      operationId: postTextPage
      parameters:
        - $ref: '#/components/parameters/expositionId'
      responses:
        '201':
          description: Returns a new empty page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextExpositionPage'
  /text-editor/export/{expositionId}:
    post:
      summary: Use pandoc to export exposition.
      operationId: postTextExpositionExport
      parameters:
        - $ref: '#/components/parameters/expositionId'
        - in: query
          name: type
          schema:
            enum: [pdf, tex, docx, odt, epub, odt, html, md]  
          description: The type of export file.
      responses:
        '200' :
          description: The rendered file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            text/plain; charset=utf-8:
              schema:
                type: string
            text/html:
              schema:
                type: string
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
            application/vnd.oasis.opendocument.text:
              schema:
                type: string
                format: binary
            application/epub+zip:
              schema:
                type: string
                format: binary
            application/x-latex:
              schema:
                type: string
        '404':
          description: Exposition not found

components:
  parameters:
    mediaId:
      name: mediaId
      in: path
      required: true
      description: id of media record
      schema:
        type: string
    expositionId:
      name: expositionId
      in: path
      required: true
      description: id of text-based exposition
      schema:
        type: string
  schemas:
    ObjectPointer:
      type: object
      required:
       - objectType
       - id
       - pointer
      properties:
        objectType:
          type: string
          enum:
            - mediaRecord
            - exposition
        id:
          type: string
          description: RC id
        pointer:
          type: object
          properties:
            timePointer:
              $ref: '#/components/schemas/TimePointer'
            twoDPointer:
              $ref: '#/components/schemas/TwoDPointer'
            counterPointer:
              $ref: '#/components/schemas/CounterPointer'
            channelPointer:
              $ref: '#/components/schemas/ChannelPointer'
    TimePointer:
      type: object
      required:
       - hours
       - minutes
       - seconds
       - milliseconds
      properties:
        hours:
          type: integer
        minutes:
          type: integer
        seconds:
          type: integer
        milliseconds:
          type: integer
    TwoDPointer:
      type: object
      required:
        - unit
        - x
        - y
      properties:
        unit:
          type: string
          enum:
            - perc
            - pixel
        x:
          type: number
          format: float
        y:
          type: number
          format: float
    CounterPointer:
      type: object
      required:
       - counterType
       - counter
      properties:
        counterType:
          type: string
          enum:
            - character
            - byte
            - page
        counter:
          type: integer
    ChannelPointer:
      type: object
      required:
       - channel
       - totalChannels
      properties:
        channel:
          type: number
          format: float
        totalChannels:
          type: integer
    Connection:
      type: object
      required:
       - subject
       - predicate
       - object
      properties:
        id:
          type: string
          description: The id of the connection
          readOnly: true
        subject: 
          $ref: '#/components/schemas/ObjectPointer'
        predicate:
          type: string
          description: Id of a predicate. Predicates can be retrieved from /predicates
        object: 
          $ref: '#/components/schemas/ObjectPointer'
    MediaRecord:
      type: object
      required:
        - title
        - copyright
        - license
      properties:
        id:
          type: string
          description: 'id generated by server, immutable'
          readOnly: true
        text:
          type: object
          properties:
            textType:
              enum: [ markdown, altText, html, plain ]
            content:
              type: string
        transcodingStatus:
          enum: [ noFile, inProgress, failed, transcoded ]
        width:
          description: Width if it is an image
          type: integer
        height:
          description: Height if it is an image
          type: integer
        title:
          type: string
          example: My Human Title
        copyright:
          type: string
          example: © Name Surname
        license:
          type: string
          description: 'RC id of the license, obtained with the call /licenses'
        description:
          type: string
          example: this is a description
        creator:
          type: string
          description: 'RC user id, immutable'
          readOnly: true
        mediaType:
          type: string
          enum:
            - video
            - audio
            - image
            - svg
            - pdf
            - text
          readOnly: true
        parents:
          type: array
          items:
            type: string
          description: media record ids
        keywordsClosed:
          type: array
          items:
            type: string
          description: 'closed vocabulary keywords ids, obtained by /keywords/closed'
        keywordsOpen:
          type: array
          items:
            type: string
          description: 'open vocabulary keywords ids, obtained by /keywords/open'
        tags:
          type: array
          items:
            type: string
          description: >-
            tags by user, non existing tags are added automatically, obtained by
            /tags/#userid
        recrodType:
          description: Type obtained from the portfolio API ...
          type: object
          properties:
            id:
              type: string
            metadata:
              type: object
        creationDate:
          type: string
          format: date
          readOnly: true
          description: date when object was created
        modifiedDate:
          type: string
          readOnly: true
          format: date
          description: date of last change to the media record
        mediaDate:
          type: string
          format: date
          readOnly: true
          description: Date of the media record or what it represents
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
          description: 'this connects one media record to another, or an exposition.'
    VocabularyTerm:
      type: object
      description: a term from a closed vocabulary
      required:
       - terms
      properties:
        id:
          readOnly: true
          type: string
        externalURI:
          type: string
          description: external definition URI.
        terms:
          type: array
          items:
            $ref: '#/components/schemas/MultiLangString'
          description: a list of synonymous terms in different languages.
    License:
      type: object
      description: A license
      required:
       - id
       - externalURI
      properties:
        id:
          type: string
          readOnly: true
        externalURI:
          type: string
          description: external definition URI.
        name:
          type: string
          description: The name of the license
    OpenVocabularyTerm:
      type: object
      description: a term from a open vocabulary
      required:
       - term
      properties:
        id:
          type: string
          readOnly: true
        term:
          type: string
          description: the keyword, language unspecified
    Predicate:
      type: object
      description: a predicate used in a connection
      required:
       - predicate
      properties:
        id:
          type: string
          readOnly: true
        predicate:
          type: string
          description: the description
        uri:
          type: string
          description: an optional uri defining the predicate
    MultiLangString:
      type: object
      description: a string with language tag
      required:
        - lang
        - value
      properties:
        lang:
          type: string
        value:
          type: string
    ShareStatus:
      type: object
      description: Read and write permssions for users that are not the creator
      required:
        - read
        - write
      properties: 
        read:
          type: object
          required:
           - users
           - public
          properties:
            users:
              description: list of user id's who can read
              type: array
              items: 
                type: string
            public:
              description: if true, anybody can read
              type: boolean
        write:
          type: object
          required:
           - users
          properties:
            users:
              description: list of user id's who can write
              type: array
              items: 
                type: string
    ProblemWithRCObject:
      type: object
      description: Problem with an expositon or media record
      required:
        - objectType
        - id
        - problem
      properties:
        objectType:
          type: string
          enum:
            - mediaRecord
            - exposition
        id:
          type: string
          description: RC id
        problem: 
          enum: [ does not exist, insufficient permissions, conflict ]
    TextExpositionPage:
      type: object
      description: A text-based exposition page
      required:
        - title
        - html
        - markdown
      properties:
        title:
          description: Page title
          type: string
        html:
          description: Rendered page
          type: string
        markdown:
          description: Markdown input
          type: string
        pageId:
          type: integer
    TextExpositionToolMeta:
      type: object
      description: Style and caption information for media
      required:
        - mediaId
      properties:
        mediaId:
          type: string
        name:
          type: string
        userClass:
          type: string
    TextExposition:
      type: object
      description: An exposition with text-based pages
      required:
        - pages
        - title
        - toolMeta
        - style
        - editorVersion
        - contentVersion
        - toc
      properties:
        pages:
          type: array
          items:
            $ref: '#/components/schemas/TextExpositionPage'
        toolMeta:
          type: array
          items:
            $ref: '#/components/schemas/TextExpositionToolMeta'
        title:
          type: string
        style:
          description: CSS styling for the whole exposition
          type: string
        id:
          type: string
        editorVersion:
          type: string
        contentVersion:
          type: integer
        toc:
          type: array
          items:
            $ref: '#/components/schemas/TextExpositionTocEntry'
    TextExpositionTocEntry:
      type: object
      description: An entry in the table of contents
      required:
        - level
        - title
        - id
        - page
      properties:
        level:
          type: integer
        title:
          type: string
        id:
          type: string
          description: Id of the element it refers to
        page:
          type: integer
          description: Id of the exposition page
    DateRange:
      type: object
      description: A temporal range between included but optional start and end points
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
    SearchRequest:
      type: object
      description: An object to filter searches for media records
      properties:
        creator:
          type: string
          description: User id
        title:
          type: string
          description: Part of the title of the media record
        mediaType:
          type: string
          enum:
            - video
            - audio
            - image
            - svg
            - pdf
            - text
        recordType:
          description: Id of type obtained from the portfolio API
          type: string
        creationDate:
          $ref: '#/components/schemas/DateRange'
        modificationDate:
          $ref: '#/components/schemas/DateRange'
        date:
          $ref: '#/components/schemas/DateRange'
        license:
          type: string
          description: Id of a license
        copyright:
          type: string
          description: Part of the copyright statement
        tag:
          type: array
          items:
            type: string
          description: A list tag ids
        keywordsClosed:
          type: array
          items:
            type: string
          description: A list closed vocabulary keyword ids
        keywordsOpen:
          type: array
          items:
            type: string
          description: Open vocabulary keywords ids
        connectedTo:
          type: array
          items:
            type: string
          description: A list of media record or exposition ids that the search result should be connected to as subject or object.
    StorageUsage:
      description: see the used and available space for a user
      type: object
      required:
        - used
        - available
      properties:
        used:
          type: number
          format: float
          description: used space in kiloBytes
        available: 
          type: number
          format: float
          description: available space in kiloBytes
