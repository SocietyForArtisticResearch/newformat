* todos
** redesign profile page
** design/sketch repository and user interaction
** design repo integration into editors
** specify functionality
** metadata scheme
** specify api

* Ideas
** markdown import/ meta-data/ set
** word import as set
** exposition is set
** scrivener as example
** limit to data. free/default 10 gb
** format of object and its links
** dummy backend for development
* There is no metadata!
** annotations, relations
** audio,images etc. as "metadata"
** relations turn data into exposition
* Single Media
** metadata
** share status (private, shared with group (portal, single users), rc, public) 
*** reading/writing
** can be part of several collections
** media page links to collections and to where it used (references)
* Media Collections 
** metadata/ should reflect "work"/ event /publication
** share status (private, shared with group (portal, single users), rc, public) 
*** reading/writing
** contained media/collections - enforce a tree/directory structure
** can be displayed as folder structure
** exposition is a collection
* "Garbage collector"
** reference counting
** when media is no longer used and deleted then it will be deleted
** object will know where it is used
* publication
** on publication media should be copied
* you cannot replace media 
* Usability
** upload folder
** searchability
* API
** all collections by user
** all media not part of a collection by user
** all media from a collection by user
** 
** global search

* create file 
endpoint /media POST 
endpoint /media/#id PUT
endpoint /media/#id DELETE
- media cannot be deleted if it is in an exposition

fields in the body:
- file (optional, mime type is extracted from file)
- title
- copyright
- license
- description 
- creator (user-id , derived only GET)
- video/audio/image/svg/pdf/text MIME (derived, GET only)
- parents [ folder-ids ]
- keyword id's (closed vocabulary)
- keyword (open vocabulary)
- tags (personal organising)
- type  
  - metadata of specific type
- dates (last/modified/creation)
- connections (optional)


/media/text POST
/media/text/#id PUT/DELETE (only the text)

Any file can be a folder

/media/#id/children GET

* vocabularies

/keywords/closed GET
/keywords/open GET
/keywords/closed PUT/POST
/keywords/open PUT/POST

/tags/userid GET
/tags GET (returns all tags)

/types GET
(painting, movie, animated film, article, act)
 
/types/schema/id GET
type specific metadata

* sharing

/media/id/permissions GET/POST/PUT


#+NAME user permissions
#+BEGIN_SRC js

{
"read" : { 
"users" : [ user-ids ],
/* "groups" : [ user-ids ],  for future */
"public" : Boolean 
}
"write" : [ user-ids ], {
 "users" : [ user-ids ],
 /* "groups" : [ user-ids ],  for future */
 "public" : Boolean 
}
}

#+END_SRC 

Notes:
- sharing will result in a message to the invited
- you can leave
- sharing a folder will propagate downwards to its children

* getting everything:

/index GET

all the media accessible by the user
- Exposition simple media
- Works media
- Media 
- Media shared with the user by others
(excludes the public media)

/index/public GET

{
    some query 
}

- all the folders and media ids (as a structured hierarchy) including what is shared with you
including metadat

* media

/media/#id/thumb GET/PUT
/media/#id/file GET
/media/#id/resize/#w/#h GET

* connections

/media/#id/connections/subject GET
/media/#id/connections/object GET
/media/#id/connection/ POST
gets an id

/media/#id/connection/#id GET/PUT/DELETE

#+NAME user permissions
#+BEGIN_SRC js

{ 
    "subject" : exposition/media/folder + pointer
    , "predicate" : relation 
    , "object" : exposition/media/folder + pointer
}

relations :

[ "contains", "annotates", "description", "realisation", "representation", "reference", "comment" ]

#+END_SRC

/predicates GET/POST
/predicates/#id PUT/DELETE

* search

/search/local POST

#+NAME search 
#+BEGIN_SRC js

{
    "title" : Maybe str (any part),
    "type" : Maybe type,
    "date" : Maybe range,
    "filetype" : Maybe filetype,
    "copyright" : Maybe str,
    "license" : Maybe license,
    "tag" : Maybe [ tag-ids ],
    "keywords" : Maybe [ keywords-ids ],
    "keywords open" : [ keywords-ids ],
    "subject-or-object-connection" : [ id ]
}

/search/global POST

#+NAME search 
#+BEGIN_SRC js

{
    "user-id" : Maybe int
    "title" : Maybe str (any part),
    "type" : Maybe type,
    "date" : Maybe range,
    "filetype" : Maybe filetype,
    "copyright" : Maybe str,
    "license" : Maybe license,
    "tag" : Maybe [ tag-ids ],
    "keywords" : Maybe [ keywords-ids ],
    "keywords open" : [ keywords-ids ],
    "subject-or-object-connection" : [ id ]
}

only publicly visible (or the things that you have permission to see)



#+END_SRC


* doc import

/import/doc POST 

#+NAME word import
#+BEGIN_SRC js

{
    "file" : worddoc
    "name" : name
}
#+END_SRC

returns a folder (id), with the media and parsed text content as Markdown (pandoc).
The position of the media is signaled by using the !{name} tokens in the Markdown, and reflected in the connections metadata.
(... contains media1) 
Every time any text is edited or created, the relationships have to computed.


* folder upload

/import/folder POST

through <input type="file" webkitdirectory mozdirectory>

returns a folder ID

* space usage / free space

/storage/usage GET 


* Questions
** Ways of relating/grouping media
*** members of the same set
*** sharing a tag
*** having a relation (connected to, recording of, annotation of, part of etc)
** Set metadata vs media metadata schemes
** when to/how to remove media
** how to link things

* workflow descriptions
** user uploads folder
The user adds/uploads a folder of documents that belong to a
project. ( /import/folder )

Text documents (odt, tex, doc, docx,
txt, rtf, org) are to be converted to markdown, so that they can be
edited in the RC repository. (pandoc)

Copyright and license 

(filled in or change)

information will be taken from the default settings (though the upload
dialog allows the user to change that).  


All the newly uploaded media
now appears in one set.  

The user proceeds to further group media
from the set by using tags and completes the metadata for the set itself.

** uploads large doc with media

/import/doc 

The user uploads a single large doc file.  She will be asked if she
wants the file to be converted to media files (images) and markdown
text. If she decides so, a set containing text and images will be
created.  
(/image positions are signified by !{} syntax in the Markdown and computed as connections between the media and the text object/)

** user groups uploaded media

A user starts taking notes in the markdown editor of the RC repo. She
uploads a number of images and connects these to the text fragments.
In the exposition she searches for media by tags.


The user uploads a single file

THe user selects a folder where this media is inserted.
