# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.share_status_read import ShareStatusRead  # noqa: F401,E501
from swagger_server.models.share_status_write import ShareStatusWrite  # noqa: F401,E501
from swagger_server import util


class ShareStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, read: ShareStatusRead=None, write: ShareStatusWrite=None):  # noqa: E501
        """ShareStatus - a model defined in Swagger

        :param read: The read of this ShareStatus.  # noqa: E501
        :type read: ShareStatusRead
        :param write: The write of this ShareStatus.  # noqa: E501
        :type write: ShareStatusWrite
        """
        self.swagger_types = {
            'read': ShareStatusRead,
            'write': ShareStatusWrite
        }

        self.attribute_map = {
            'read': 'read',
            'write': 'write'
        }
        self._read = read
        self._write = write

    @classmethod
    def from_dict(cls, dikt) -> 'ShareStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShareStatus of this ShareStatus.  # noqa: E501
        :rtype: ShareStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read(self) -> ShareStatusRead:
        """Gets the read of this ShareStatus.


        :return: The read of this ShareStatus.
        :rtype: ShareStatusRead
        """
        return self._read

    @read.setter
    def read(self, read: ShareStatusRead):
        """Sets the read of this ShareStatus.


        :param read: The read of this ShareStatus.
        :type read: ShareStatusRead
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")  # noqa: E501

        self._read = read

    @property
    def write(self) -> ShareStatusWrite:
        """Gets the write of this ShareStatus.


        :return: The write of this ShareStatus.
        :rtype: ShareStatusWrite
        """
        return self._write

    @write.setter
    def write(self, write: ShareStatusWrite):
        """Sets the write of this ShareStatus.


        :param write: The write of this ShareStatus.
        :type write: ShareStatusWrite
        """
        if write is None:
            raise ValueError("Invalid value for `write`, must not be `None`")  # noqa: E501

        self._write = write
