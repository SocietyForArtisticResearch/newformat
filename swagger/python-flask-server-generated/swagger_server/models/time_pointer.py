# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TimePointer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, hours: int=None, minutes: int=None, seconds: int=None, milliseconds: int=None):  # noqa: E501
        """TimePointer - a model defined in Swagger

        :param hours: The hours of this TimePointer.  # noqa: E501
        :type hours: int
        :param minutes: The minutes of this TimePointer.  # noqa: E501
        :type minutes: int
        :param seconds: The seconds of this TimePointer.  # noqa: E501
        :type seconds: int
        :param milliseconds: The milliseconds of this TimePointer.  # noqa: E501
        :type milliseconds: int
        """
        self.swagger_types = {
            'hours': int,
            'minutes': int,
            'seconds': int,
            'milliseconds': int
        }

        self.attribute_map = {
            'hours': 'hours',
            'minutes': 'minutes',
            'seconds': 'seconds',
            'milliseconds': 'milliseconds'
        }
        self._hours = hours
        self._minutes = minutes
        self._seconds = seconds
        self._milliseconds = milliseconds

    @classmethod
    def from_dict(cls, dikt) -> 'TimePointer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimePointer of this TimePointer.  # noqa: E501
        :rtype: TimePointer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours(self) -> int:
        """Gets the hours of this TimePointer.


        :return: The hours of this TimePointer.
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours: int):
        """Sets the hours of this TimePointer.


        :param hours: The hours of this TimePointer.
        :type hours: int
        """
        if hours is None:
            raise ValueError("Invalid value for `hours`, must not be `None`")  # noqa: E501

        self._hours = hours

    @property
    def minutes(self) -> int:
        """Gets the minutes of this TimePointer.


        :return: The minutes of this TimePointer.
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes: int):
        """Sets the minutes of this TimePointer.


        :param minutes: The minutes of this TimePointer.
        :type minutes: int
        """
        if minutes is None:
            raise ValueError("Invalid value for `minutes`, must not be `None`")  # noqa: E501

        self._minutes = minutes

    @property
    def seconds(self) -> int:
        """Gets the seconds of this TimePointer.


        :return: The seconds of this TimePointer.
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds: int):
        """Sets the seconds of this TimePointer.


        :param seconds: The seconds of this TimePointer.
        :type seconds: int
        """
        if seconds is None:
            raise ValueError("Invalid value for `seconds`, must not be `None`")  # noqa: E501

        self._seconds = seconds

    @property
    def milliseconds(self) -> int:
        """Gets the milliseconds of this TimePointer.


        :return: The milliseconds of this TimePointer.
        :rtype: int
        """
        return self._milliseconds

    @milliseconds.setter
    def milliseconds(self, milliseconds: int):
        """Sets the milliseconds of this TimePointer.


        :param milliseconds: The milliseconds of this TimePointer.
        :type milliseconds: int
        """
        if milliseconds is None:
            raise ValueError("Invalid value for `milliseconds`, must not be `None`")  # noqa: E501

        self._milliseconds = milliseconds
