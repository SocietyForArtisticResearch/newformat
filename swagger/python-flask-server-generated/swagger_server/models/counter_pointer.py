# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CounterPointer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, counter_type: str=None, counter: int=None):  # noqa: E501
        """CounterPointer - a model defined in Swagger

        :param counter_type: The counter_type of this CounterPointer.  # noqa: E501
        :type counter_type: str
        :param counter: The counter of this CounterPointer.  # noqa: E501
        :type counter: int
        """
        self.swagger_types = {
            'counter_type': str,
            'counter': int
        }

        self.attribute_map = {
            'counter_type': 'counterType',
            'counter': 'counter'
        }
        self._counter_type = counter_type
        self._counter = counter

    @classmethod
    def from_dict(cls, dikt) -> 'CounterPointer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CounterPointer of this CounterPointer.  # noqa: E501
        :rtype: CounterPointer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counter_type(self) -> str:
        """Gets the counter_type of this CounterPointer.


        :return: The counter_type of this CounterPointer.
        :rtype: str
        """
        return self._counter_type

    @counter_type.setter
    def counter_type(self, counter_type: str):
        """Sets the counter_type of this CounterPointer.


        :param counter_type: The counter_type of this CounterPointer.
        :type counter_type: str
        """
        allowed_values = ["character", "byte", "page"]  # noqa: E501
        if counter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `counter_type` ({0}), must be one of {1}"
                .format(counter_type, allowed_values)
            )

        self._counter_type = counter_type

    @property
    def counter(self) -> int:
        """Gets the counter of this CounterPointer.


        :return: The counter of this CounterPointer.
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter: int):
        """Sets the counter of this CounterPointer.


        :param counter: The counter of this CounterPointer.
        :type counter: int
        """
        if counter is None:
            raise ValueError("Invalid value for `counter`, must not be `None`")  # noqa: E501

        self._counter = counter
