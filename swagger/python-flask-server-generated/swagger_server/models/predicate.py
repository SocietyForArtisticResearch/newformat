# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Predicate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, predicate: str=None, uri: str=None):  # noqa: E501
        """Predicate - a model defined in Swagger

        :param id: The id of this Predicate.  # noqa: E501
        :type id: str
        :param predicate: The predicate of this Predicate.  # noqa: E501
        :type predicate: str
        :param uri: The uri of this Predicate.  # noqa: E501
        :type uri: str
        """
        self.swagger_types = {
            'id': str,
            'predicate': str,
            'uri': str
        }

        self.attribute_map = {
            'id': 'id',
            'predicate': 'predicate',
            'uri': 'uri'
        }
        self._id = id
        self._predicate = predicate
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'Predicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Predicate of this Predicate.  # noqa: E501
        :rtype: Predicate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Predicate.


        :return: The id of this Predicate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Predicate.


        :param id: The id of this Predicate.
        :type id: str
        """

        self._id = id

    @property
    def predicate(self) -> str:
        """Gets the predicate of this Predicate.

        the description  # noqa: E501

        :return: The predicate of this Predicate.
        :rtype: str
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate: str):
        """Sets the predicate of this Predicate.

        the description  # noqa: E501

        :param predicate: The predicate of this Predicate.
        :type predicate: str
        """
        if predicate is None:
            raise ValueError("Invalid value for `predicate`, must not be `None`")  # noqa: E501

        self._predicate = predicate

    @property
    def uri(self) -> str:
        """Gets the uri of this Predicate.

        an optional uri defining the predicate  # noqa: E501

        :return: The uri of this Predicate.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Predicate.

        an optional uri defining the predicate  # noqa: E501

        :param uri: The uri of this Predicate.
        :type uri: str
        """

        self._uri = uri
