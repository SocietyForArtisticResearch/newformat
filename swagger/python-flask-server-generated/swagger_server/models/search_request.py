# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.date_range import DateRange  # noqa: F401,E501
from swagger_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, creator: str=None, title: str=None, media_type: str=None, record_type: str=None, creation_date: DateRange=None, modification_date: DateRange=None, _date: DateRange=None, license: str=None, copyright: str=None, tag: List[str]=None, keywords_closed: List[str]=None, keywords_open: List[str]=None, connected_to: List[str]=None):  # noqa: E501
        """SearchRequest - a model defined in Swagger

        :param creator: The creator of this SearchRequest.  # noqa: E501
        :type creator: str
        :param title: The title of this SearchRequest.  # noqa: E501
        :type title: str
        :param media_type: The media_type of this SearchRequest.  # noqa: E501
        :type media_type: str
        :param record_type: The record_type of this SearchRequest.  # noqa: E501
        :type record_type: str
        :param creation_date: The creation_date of this SearchRequest.  # noqa: E501
        :type creation_date: DateRange
        :param modification_date: The modification_date of this SearchRequest.  # noqa: E501
        :type modification_date: DateRange
        :param _date: The _date of this SearchRequest.  # noqa: E501
        :type _date: DateRange
        :param license: The license of this SearchRequest.  # noqa: E501
        :type license: str
        :param copyright: The copyright of this SearchRequest.  # noqa: E501
        :type copyright: str
        :param tag: The tag of this SearchRequest.  # noqa: E501
        :type tag: List[str]
        :param keywords_closed: The keywords_closed of this SearchRequest.  # noqa: E501
        :type keywords_closed: List[str]
        :param keywords_open: The keywords_open of this SearchRequest.  # noqa: E501
        :type keywords_open: List[str]
        :param connected_to: The connected_to of this SearchRequest.  # noqa: E501
        :type connected_to: List[str]
        """
        self.swagger_types = {
            'creator': str,
            'title': str,
            'media_type': str,
            'record_type': str,
            'creation_date': DateRange,
            'modification_date': DateRange,
            '_date': DateRange,
            'license': str,
            'copyright': str,
            'tag': List[str],
            'keywords_closed': List[str],
            'keywords_open': List[str],
            'connected_to': List[str]
        }

        self.attribute_map = {
            'creator': 'creator',
            'title': 'title',
            'media_type': 'mediaType',
            'record_type': 'recordType',
            'creation_date': 'creationDate',
            'modification_date': 'modificationDate',
            '_date': 'date',
            'license': 'license',
            'copyright': 'copyright',
            'tag': 'tag',
            'keywords_closed': 'keywordsClosed',
            'keywords_open': 'keywordsOpen',
            'connected_to': 'connectedTo'
        }
        self._creator = creator
        self._title = title
        self._media_type = media_type
        self._record_type = record_type
        self._creation_date = creation_date
        self._modification_date = modification_date
        self.__date = _date
        self._license = license
        self._copyright = copyright
        self._tag = tag
        self._keywords_closed = keywords_closed
        self._keywords_open = keywords_open
        self._connected_to = connected_to

    @classmethod
    def from_dict(cls, dikt) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchRequest of this SearchRequest.  # noqa: E501
        :rtype: SearchRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator(self) -> str:
        """Gets the creator of this SearchRequest.

        User id  # noqa: E501

        :return: The creator of this SearchRequest.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator: str):
        """Sets the creator of this SearchRequest.

        User id  # noqa: E501

        :param creator: The creator of this SearchRequest.
        :type creator: str
        """

        self._creator = creator

    @property
    def title(self) -> str:
        """Gets the title of this SearchRequest.

        Part of the title of the media record  # noqa: E501

        :return: The title of this SearchRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this SearchRequest.

        Part of the title of the media record  # noqa: E501

        :param title: The title of this SearchRequest.
        :type title: str
        """

        self._title = title

    @property
    def media_type(self) -> str:
        """Gets the media_type of this SearchRequest.


        :return: The media_type of this SearchRequest.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str):
        """Sets the media_type of this SearchRequest.


        :param media_type: The media_type of this SearchRequest.
        :type media_type: str
        """
        allowed_values = ["video", "audio", "image", "svg", "pdf", "text"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    @property
    def record_type(self) -> str:
        """Gets the record_type of this SearchRequest.

        Id of type obtained from the portfolio API  # noqa: E501

        :return: The record_type of this SearchRequest.
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type: str):
        """Sets the record_type of this SearchRequest.

        Id of type obtained from the portfolio API  # noqa: E501

        :param record_type: The record_type of this SearchRequest.
        :type record_type: str
        """

        self._record_type = record_type

    @property
    def creation_date(self) -> DateRange:
        """Gets the creation_date of this SearchRequest.


        :return: The creation_date of this SearchRequest.
        :rtype: DateRange
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: DateRange):
        """Sets the creation_date of this SearchRequest.


        :param creation_date: The creation_date of this SearchRequest.
        :type creation_date: DateRange
        """

        self._creation_date = creation_date

    @property
    def modification_date(self) -> DateRange:
        """Gets the modification_date of this SearchRequest.


        :return: The modification_date of this SearchRequest.
        :rtype: DateRange
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date: DateRange):
        """Sets the modification_date of this SearchRequest.


        :param modification_date: The modification_date of this SearchRequest.
        :type modification_date: DateRange
        """

        self._modification_date = modification_date

    @property
    def _date(self) -> DateRange:
        """Gets the _date of this SearchRequest.


        :return: The _date of this SearchRequest.
        :rtype: DateRange
        """
        return self.__date

    @_date.setter
    def _date(self, _date: DateRange):
        """Sets the _date of this SearchRequest.


        :param _date: The _date of this SearchRequest.
        :type _date: DateRange
        """

        self.__date = _date

    @property
    def license(self) -> str:
        """Gets the license of this SearchRequest.

        Id of a license  # noqa: E501

        :return: The license of this SearchRequest.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: str):
        """Sets the license of this SearchRequest.

        Id of a license  # noqa: E501

        :param license: The license of this SearchRequest.
        :type license: str
        """

        self._license = license

    @property
    def copyright(self) -> str:
        """Gets the copyright of this SearchRequest.

        Part of the copyright statement  # noqa: E501

        :return: The copyright of this SearchRequest.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright: str):
        """Sets the copyright of this SearchRequest.

        Part of the copyright statement  # noqa: E501

        :param copyright: The copyright of this SearchRequest.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def tag(self) -> List[str]:
        """Gets the tag of this SearchRequest.

        A list tag ids  # noqa: E501

        :return: The tag of this SearchRequest.
        :rtype: List[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag: List[str]):
        """Sets the tag of this SearchRequest.

        A list tag ids  # noqa: E501

        :param tag: The tag of this SearchRequest.
        :type tag: List[str]
        """

        self._tag = tag

    @property
    def keywords_closed(self) -> List[str]:
        """Gets the keywords_closed of this SearchRequest.

        A list closed vocabulary keyword ids  # noqa: E501

        :return: The keywords_closed of this SearchRequest.
        :rtype: List[str]
        """
        return self._keywords_closed

    @keywords_closed.setter
    def keywords_closed(self, keywords_closed: List[str]):
        """Sets the keywords_closed of this SearchRequest.

        A list closed vocabulary keyword ids  # noqa: E501

        :param keywords_closed: The keywords_closed of this SearchRequest.
        :type keywords_closed: List[str]
        """

        self._keywords_closed = keywords_closed

    @property
    def keywords_open(self) -> List[str]:
        """Gets the keywords_open of this SearchRequest.

        Open vocabulary keywords ids  # noqa: E501

        :return: The keywords_open of this SearchRequest.
        :rtype: List[str]
        """
        return self._keywords_open

    @keywords_open.setter
    def keywords_open(self, keywords_open: List[str]):
        """Sets the keywords_open of this SearchRequest.

        Open vocabulary keywords ids  # noqa: E501

        :param keywords_open: The keywords_open of this SearchRequest.
        :type keywords_open: List[str]
        """

        self._keywords_open = keywords_open

    @property
    def connected_to(self) -> List[str]:
        """Gets the connected_to of this SearchRequest.

        A list of media record or exposition ids that the search result should be connected to as subject or object.  # noqa: E501

        :return: The connected_to of this SearchRequest.
        :rtype: List[str]
        """
        return self._connected_to

    @connected_to.setter
    def connected_to(self, connected_to: List[str]):
        """Sets the connected_to of this SearchRequest.

        A list of media record or exposition ids that the search result should be connected to as subject or object.  # noqa: E501

        :param connected_to: The connected_to of this SearchRequest.
        :type connected_to: List[str]
        """

        self._connected_to = connected_to
