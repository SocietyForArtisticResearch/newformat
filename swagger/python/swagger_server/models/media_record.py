# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.connection import Connection  # noqa: F401,E501
from swagger_server.models.media_record_text import MediaRecordText  # noqa: F401,E501
from swagger_server.models.media_record_type import MediaRecordType  # noqa: F401,E501
from swagger_server import util


class MediaRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, text: MediaRecordText=None, title: str=None, copyright: str=None, license: str=None, description: str=None, creator: str=None, media_type: str=None, parents: List[str]=None, keywords_closed: List[str]=None, keywords_open: List[str]=None, tags: List[str]=None, type: MediaRecordType=None, creation_date: date=None, modified_date: date=None, media_date: date=None, connections: List[Connection]=None):  # noqa: E501
        """MediaRecord - a model defined in Swagger

        :param id: The id of this MediaRecord.  # noqa: E501
        :type id: str
        :param text: The text of this MediaRecord.  # noqa: E501
        :type text: MediaRecordText
        :param title: The title of this MediaRecord.  # noqa: E501
        :type title: str
        :param copyright: The copyright of this MediaRecord.  # noqa: E501
        :type copyright: str
        :param license: The license of this MediaRecord.  # noqa: E501
        :type license: str
        :param description: The description of this MediaRecord.  # noqa: E501
        :type description: str
        :param creator: The creator of this MediaRecord.  # noqa: E501
        :type creator: str
        :param media_type: The media_type of this MediaRecord.  # noqa: E501
        :type media_type: str
        :param parents: The parents of this MediaRecord.  # noqa: E501
        :type parents: List[str]
        :param keywords_closed: The keywords_closed of this MediaRecord.  # noqa: E501
        :type keywords_closed: List[str]
        :param keywords_open: The keywords_open of this MediaRecord.  # noqa: E501
        :type keywords_open: List[str]
        :param tags: The tags of this MediaRecord.  # noqa: E501
        :type tags: List[str]
        :param type: The type of this MediaRecord.  # noqa: E501
        :type type: MediaRecordType
        :param creation_date: The creation_date of this MediaRecord.  # noqa: E501
        :type creation_date: date
        :param modified_date: The modified_date of this MediaRecord.  # noqa: E501
        :type modified_date: date
        :param media_date: The media_date of this MediaRecord.  # noqa: E501
        :type media_date: date
        :param connections: The connections of this MediaRecord.  # noqa: E501
        :type connections: List[Connection]
        """
        self.swagger_types = {
            'id': str,
            'text': MediaRecordText,
            'title': str,
            'copyright': str,
            'license': str,
            'description': str,
            'creator': str,
            'media_type': str,
            'parents': List[str],
            'keywords_closed': List[str],
            'keywords_open': List[str],
            'tags': List[str],
            'type': MediaRecordType,
            'creation_date': date,
            'modified_date': date,
            'media_date': date,
            'connections': List[Connection]
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'title': 'title',
            'copyright': 'copyright',
            'license': 'license',
            'description': 'description',
            'creator': 'creator',
            'media_type': 'mediaType',
            'parents': 'parents',
            'keywords_closed': 'keywordsClosed',
            'keywords_open': 'keywordsOpen',
            'tags': 'tags',
            'type': 'type',
            'creation_date': 'creationDate',
            'modified_date': 'modifiedDate',
            'media_date': 'mediaDate',
            'connections': 'connections'
        }
        self._id = id
        self._text = text
        self._title = title
        self._copyright = copyright
        self._license = license
        self._description = description
        self._creator = creator
        self._media_type = media_type
        self._parents = parents
        self._keywords_closed = keywords_closed
        self._keywords_open = keywords_open
        self._tags = tags
        self._type = type
        self._creation_date = creation_date
        self._modified_date = modified_date
        self._media_date = media_date
        self._connections = connections

    @classmethod
    def from_dict(cls, dikt) -> 'MediaRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaRecord of this MediaRecord.  # noqa: E501
        :rtype: MediaRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this MediaRecord.

        id generated by server, immutable  # noqa: E501

        :return: The id of this MediaRecord.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MediaRecord.

        id generated by server, immutable  # noqa: E501

        :param id: The id of this MediaRecord.
        :type id: str
        """

        self._id = id

    @property
    def text(self) -> MediaRecordText:
        """Gets the text of this MediaRecord.


        :return: The text of this MediaRecord.
        :rtype: MediaRecordText
        """
        return self._text

    @text.setter
    def text(self, text: MediaRecordText):
        """Sets the text of this MediaRecord.


        :param text: The text of this MediaRecord.
        :type text: MediaRecordText
        """

        self._text = text

    @property
    def title(self) -> str:
        """Gets the title of this MediaRecord.


        :return: The title of this MediaRecord.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this MediaRecord.


        :param title: The title of this MediaRecord.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def copyright(self) -> str:
        """Gets the copyright of this MediaRecord.


        :return: The copyright of this MediaRecord.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright: str):
        """Sets the copyright of this MediaRecord.


        :param copyright: The copyright of this MediaRecord.
        :type copyright: str
        """
        if copyright is None:
            raise ValueError("Invalid value for `copyright`, must not be `None`")  # noqa: E501

        self._copyright = copyright

    @property
    def license(self) -> str:
        """Gets the license of this MediaRecord.

        RC id of the license, obtained with the call /licenses  # noqa: E501

        :return: The license of this MediaRecord.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: str):
        """Sets the license of this MediaRecord.

        RC id of the license, obtained with the call /licenses  # noqa: E501

        :param license: The license of this MediaRecord.
        :type license: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")  # noqa: E501

        self._license = license

    @property
    def description(self) -> str:
        """Gets the description of this MediaRecord.


        :return: The description of this MediaRecord.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this MediaRecord.


        :param description: The description of this MediaRecord.
        :type description: str
        """

        self._description = description

    @property
    def creator(self) -> str:
        """Gets the creator of this MediaRecord.

        RC user id, immutable  # noqa: E501

        :return: The creator of this MediaRecord.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator: str):
        """Sets the creator of this MediaRecord.

        RC user id, immutable  # noqa: E501

        :param creator: The creator of this MediaRecord.
        :type creator: str
        """

        self._creator = creator

    @property
    def media_type(self) -> str:
        """Gets the media_type of this MediaRecord.


        :return: The media_type of this MediaRecord.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str):
        """Sets the media_type of this MediaRecord.


        :param media_type: The media_type of this MediaRecord.
        :type media_type: str
        """
        allowed_values = ["video", "audio", "image", "svg", "pdf", "text"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    @property
    def parents(self) -> List[str]:
        """Gets the parents of this MediaRecord.

        media record ids  # noqa: E501

        :return: The parents of this MediaRecord.
        :rtype: List[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents: List[str]):
        """Sets the parents of this MediaRecord.

        media record ids  # noqa: E501

        :param parents: The parents of this MediaRecord.
        :type parents: List[str]
        """

        self._parents = parents

    @property
    def keywords_closed(self) -> List[str]:
        """Gets the keywords_closed of this MediaRecord.

        closed vocabolary keywords ids, obtained by /keywords/closed  # noqa: E501

        :return: The keywords_closed of this MediaRecord.
        :rtype: List[str]
        """
        return self._keywords_closed

    @keywords_closed.setter
    def keywords_closed(self, keywords_closed: List[str]):
        """Sets the keywords_closed of this MediaRecord.

        closed vocabolary keywords ids, obtained by /keywords/closed  # noqa: E501

        :param keywords_closed: The keywords_closed of this MediaRecord.
        :type keywords_closed: List[str]
        """

        self._keywords_closed = keywords_closed

    @property
    def keywords_open(self) -> List[str]:
        """Gets the keywords_open of this MediaRecord.

        open vocabolary keywords ids, obtained by /keywords/open  # noqa: E501

        :return: The keywords_open of this MediaRecord.
        :rtype: List[str]
        """
        return self._keywords_open

    @keywords_open.setter
    def keywords_open(self, keywords_open: List[str]):
        """Sets the keywords_open of this MediaRecord.

        open vocabolary keywords ids, obtained by /keywords/open  # noqa: E501

        :param keywords_open: The keywords_open of this MediaRecord.
        :type keywords_open: List[str]
        """

        self._keywords_open = keywords_open

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this MediaRecord.

        tags by user, non existing tags are added automatically, obtained by /tags/#userid  # noqa: E501

        :return: The tags of this MediaRecord.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this MediaRecord.

        tags by user, non existing tags are added automatically, obtained by /tags/#userid  # noqa: E501

        :param tags: The tags of this MediaRecord.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self) -> MediaRecordType:
        """Gets the type of this MediaRecord.


        :return: The type of this MediaRecord.
        :rtype: MediaRecordType
        """
        return self._type

    @type.setter
    def type(self, type: MediaRecordType):
        """Sets the type of this MediaRecord.


        :param type: The type of this MediaRecord.
        :type type: MediaRecordType
        """

        self._type = type

    @property
    def creation_date(self) -> date:
        """Gets the creation_date of this MediaRecord.

        date when object was created  # noqa: E501

        :return: The creation_date of this MediaRecord.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: date):
        """Sets the creation_date of this MediaRecord.

        date when object was created  # noqa: E501

        :param creation_date: The creation_date of this MediaRecord.
        :type creation_date: date
        """

        self._creation_date = creation_date

    @property
    def modified_date(self) -> date:
        """Gets the modified_date of this MediaRecord.

        date of last change to the media record  # noqa: E501

        :return: The modified_date of this MediaRecord.
        :rtype: date
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date: date):
        """Sets the modified_date of this MediaRecord.

        date of last change to the media record  # noqa: E501

        :param modified_date: The modified_date of this MediaRecord.
        :type modified_date: date
        """

        self._modified_date = modified_date

    @property
    def media_date(self) -> date:
        """Gets the media_date of this MediaRecord.

        Date of the media record or what it represents  # noqa: E501

        :return: The media_date of this MediaRecord.
        :rtype: date
        """
        return self._media_date

    @media_date.setter
    def media_date(self, media_date: date):
        """Sets the media_date of this MediaRecord.

        Date of the media record or what it represents  # noqa: E501

        :param media_date: The media_date of this MediaRecord.
        :type media_date: date
        """

        self._media_date = media_date

    @property
    def connections(self) -> List[Connection]:
        """Gets the connections of this MediaRecord.

        this connects one media record to another, or an exposition.  # noqa: E501

        :return: The connections of this MediaRecord.
        :rtype: List[Connection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections: List[Connection]):
        """Sets the connections of this MediaRecord.

        this connects one media record to another, or an exposition.  # noqa: E501

        :param connections: The connections of this MediaRecord.
        :type connections: List[Connection]
        """

        self._connections = connections
