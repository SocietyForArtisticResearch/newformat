# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProblemWithRCObject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, object_type: str=None, id: str=None, problem: str=None):  # noqa: E501
        """ProblemWithRCObject - a model defined in Swagger

        :param object_type: The object_type of this ProblemWithRCObject.  # noqa: E501
        :type object_type: str
        :param id: The id of this ProblemWithRCObject.  # noqa: E501
        :type id: str
        :param problem: The problem of this ProblemWithRCObject.  # noqa: E501
        :type problem: str
        """
        self.swagger_types = {
            'object_type': str,
            'id': str,
            'problem': str
        }

        self.attribute_map = {
            'object_type': 'objectType',
            'id': 'id',
            'problem': 'problem'
        }
        self._object_type = object_type
        self._id = id
        self._problem = problem

    @classmethod
    def from_dict(cls, dikt) -> 'ProblemWithRCObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProblemWithRCObject of this ProblemWithRCObject.  # noqa: E501
        :rtype: ProblemWithRCObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_type(self) -> str:
        """Gets the object_type of this ProblemWithRCObject.


        :return: The object_type of this ProblemWithRCObject.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type: str):
        """Sets the object_type of this ProblemWithRCObject.


        :param object_type: The object_type of this ProblemWithRCObject.
        :type object_type: str
        """
        allowed_values = ["mediaRecord", "exposition"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def id(self) -> str:
        """Gets the id of this ProblemWithRCObject.

        RC id  # noqa: E501

        :return: The id of this ProblemWithRCObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ProblemWithRCObject.

        RC id  # noqa: E501

        :param id: The id of this ProblemWithRCObject.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def problem(self) -> str:
        """Gets the problem of this ProblemWithRCObject.


        :return: The problem of this ProblemWithRCObject.
        :rtype: str
        """
        return self._problem

    @problem.setter
    def problem(self, problem: str):
        """Sets the problem of this ProblemWithRCObject.


        :param problem: The problem of this ProblemWithRCObject.
        :type problem: str
        """
        if problem is None:
            raise ValueError("Invalid value for `problem`, must not be `None`")  # noqa: E501

        self._problem = problem
