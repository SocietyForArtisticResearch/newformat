# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.multi_lang_string import MultiLangString  # noqa: F401,E501
from swagger_server import util


class VocabularyTerm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, external_uri: str=None, terms: List[MultiLangString]=None):  # noqa: E501
        """VocabularyTerm - a model defined in Swagger

        :param id: The id of this VocabularyTerm.  # noqa: E501
        :type id: str
        :param external_uri: The external_uri of this VocabularyTerm.  # noqa: E501
        :type external_uri: str
        :param terms: The terms of this VocabularyTerm.  # noqa: E501
        :type terms: List[MultiLangString]
        """
        self.swagger_types = {
            'id': str,
            'external_uri': str,
            'terms': List[MultiLangString]
        }

        self.attribute_map = {
            'id': 'id',
            'external_uri': 'externalURI',
            'terms': 'terms'
        }
        self._id = id
        self._external_uri = external_uri
        self._terms = terms

    @classmethod
    def from_dict(cls, dikt) -> 'VocabularyTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VocabularyTerm of this VocabularyTerm.  # noqa: E501
        :rtype: VocabularyTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VocabularyTerm.


        :return: The id of this VocabularyTerm.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VocabularyTerm.


        :param id: The id of this VocabularyTerm.
        :type id: str
        """

        self._id = id

    @property
    def external_uri(self) -> str:
        """Gets the external_uri of this VocabularyTerm.

        external definition URI.  # noqa: E501

        :return: The external_uri of this VocabularyTerm.
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri: str):
        """Sets the external_uri of this VocabularyTerm.

        external definition URI.  # noqa: E501

        :param external_uri: The external_uri of this VocabularyTerm.
        :type external_uri: str
        """

        self._external_uri = external_uri

    @property
    def terms(self) -> List[MultiLangString]:
        """Gets the terms of this VocabularyTerm.

        a list of synonymous terms in different languages.  # noqa: E501

        :return: The terms of this VocabularyTerm.
        :rtype: List[MultiLangString]
        """
        return self._terms

    @terms.setter
    def terms(self, terms: List[MultiLangString]):
        """Sets the terms of this VocabularyTerm.

        a list of synonymous terms in different languages.  # noqa: E501

        :param terms: The terms of this VocabularyTerm.
        :type terms: List[MultiLangString]
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")  # noqa: E501

        self._terms = terms
