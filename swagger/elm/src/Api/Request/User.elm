{-
   Media Repository API
   The Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.User exposing
    ( deleteConnection
    , deleteKeywordsOpen
    , deleteTag
    , getConnections
    , getKeywordsClosed
    , getKeywordsOpen
    , getLicenses
    , getMedia
    , getMediaChildren
    , getMediaFile
    , getMediaIndex
    , getMediaThumb
    , getPredicates
    , getShareStatus
    , getStorageUsage
    , getTags
    , getTextExposition
    , getTypes
    , getTypesSchema
    , mediaMediaIdDelete
    , mediaSearchPost
    , postConnection
    , postKeywordsOpen
    , postMedia
    , postTag
    , postTextExpositionExport, Type(..), type_Variants
    , postTextPage
    , putConnection
    , putMedia
    , putMediaFile
    , putMediaImportDoc
    , putMediaImportFolder
    , putMediaThumb
    , putShareStatus
    , putTextExposition
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode


type Type
    = TypePdf
    | TypeTex
    | TypeDocx
    | TypeOdt
    | TypeEpub
    | TypeOdt
    | TypeHtml
    | TypeMd


type_Variants : List Type
type_Variants =
    [ TypePdf
    , TypeTex
    , TypeDocx
    , TypeOdt
    , TypeEpub
    , TypeOdt
    , TypeHtml
    , TypeMd
    ]


stringFromType : Type -> String
stringFromType model =
    case model of
        TypePdf ->
            "pdf"

        TypeTex ->
            "tex"

        TypeDocx ->
            "docx"

        TypeOdt ->
            "odt"

        TypeEpub ->
            "epub"

        TypeOdt ->
            "odt"

        TypeHtml ->
            "html"

        TypeMd ->
            "md"





deleteConnection : String -> Api.Request ()
deleteConnection connectionId_path =
    Api.request
        "DELETE"
        "/connection/{connectionId}"
        [ ( "connectionId", identity connectionId_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())



deleteKeywordsOpen : String -> Api.Request ()
deleteKeywordsOpen openKeywordId_path =
    Api.request
        "DELETE"
        "/keywords/open/{openKeywordId}"
        [ ( "openKeywordId", identity openKeywordId_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())



deleteTag : String -> Api.Request ()
deleteTag tagId_path =
    Api.request
        "DELETE"
        "/tags/{tagId}"
        [ ( "tagId", identity tagId_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())



getConnections : String -> Api.Request (List Api.Data.Connection)
getConnections mediaId_path =
    Api.request
        "GET"
        "/media/{mediaId}/connections"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        (Json.Decode.list Api.Data.connectionDecoder)



getKeywordsClosed : Api.Request (List Api.Data.VocabularyTerm)
getKeywordsClosed =
    Api.request
        "GET"
        "/keywords/closed"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.vocabularyTermDecoder)



getKeywordsOpen : Maybe String -> Maybe Int -> Api.Request (List Api.Data.OpenVocabularyTerm)
getKeywordsOpen startingWith_query limit_query =
    Api.request
        "GET"
        "/keywords/open"
        []
        [ ( "startingWith", Maybe.map identity startingWith_query ), ( "limit", Maybe.map String.fromInt limit_query ) ]
        []
        Nothing
        (Json.Decode.list Api.Data.openVocabularyTermDecoder)



{-| Licenses are retrieved from 'https://voc.uni-ak.ac.at/skosmos/licenses/en/page/?uri=http://base.uni-ak.ac.at/portfolio/licenses/CC-BY-NC-SA-4.0'
-}
getLicenses : Api.Request (List Api.Data.License)
getLicenses =
    Api.request
        "GET"
        "/licenses"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.licenseDecoder)



getMedia : String -> Api.Request Api.Data.MediaRecord
getMedia mediaId_path =
    Api.request
        "GET"
        "/media/{mediaId}"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        Api.Data.mediaRecordDecoder



getMediaChildren : String -> Api.Request (List Api.Data.MediaRecord)
getMediaChildren mediaId_path =
    Api.request
        "GET"
        "/media/{mediaId}/children"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        (Json.Decode.list Api.Data.mediaRecordDecoder)



getMediaFile : String -> Api.Request String
getMediaFile mediaId_path =
    Api.request
        "GET"
        "/media/{mediaId}/file"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        Json.Decode.string



{-| Get all media accessible to user based on id. User is is derived from token. 
-}
getMediaIndex : Api.Request (List Api.Data.MediaRecord)
getMediaIndex =
    Api.request
        "GET"
        "/media/index"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.mediaRecordDecoder)



getMediaThumb : String -> Api.Request String
getMediaThumb mediaId_path =
    Api.request
        "GET"
        "/media/{mediaId}/thumb"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        Json.Decode.string



getPredicates : Api.Request (List Api.Data.Predicate)
getPredicates =
    Api.request
        "GET"
        "/predicates"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.predicateDecoder)



getShareStatus : String -> Api.Request Api.Data.ShareStatus
getShareStatus mediaId_path =
    Api.request
        "GET"
        "/media/{mediaId}/shareStatus"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        Api.Data.shareStatusDecoder



getStorageUsage : Api.Request Api.Data.StorageUsage
getStorageUsage =
    Api.request
        "GET"
        "/storage/usage"
        []
        []
        []
        Nothing
        Api.Data.storageUsageDecoder



getTags : Api.Request (List Api.Data.OpenVocabularyTerm)
getTags =
    Api.request
        "GET"
        "/tags"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.openVocabularyTermDecoder)



getTextExposition : String -> Api.Request Api.Data.TextExposition
getTextExposition expositionId_path =
    Api.request
        "GET"
        "/text-editor/{expositionId}"
        [ ( "expositionId", identity expositionId_path ) ]
        []
        []
        Nothing
        Api.Data.textExpositionDecoder



getTypes : Api.Request (List String)
getTypes =
    Api.request
        "GET"
        "/types"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.stringDecoder)



getTypesSchema : String -> Api.Request Api.Data.Object
getTypesSchema schemaId_path =
    Api.request
        "GET"
        "/types/schema/{schemaId}"
        [ ( "schemaId", identity schemaId_path ) ]
        []
        []
        Nothing
        Api.Data.objectDecoder



{-| Deletes a media record and also the respective share status object. It cannot be deleted if media record is used in exposition. Connections to other entities should be removed.
-}
mediaMediaIdDelete : String -> Api.Request ()
mediaMediaIdDelete mediaId_path =
    Api.request
        "DELETE"
        "/media/{mediaId}"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())



mediaSearchPost : Api.Data.SearchRequest -> Api.Request (List Api.Data.MediaRecord)
mediaSearchPost searchRequest_body =
    Api.request
        "POST"
        "/media/search"
        []
        []
        []
        (Just (Api.Data.encodeSearchRequest searchRequest_body))
        (Json.Decode.list Api.Data.mediaRecordDecoder)



postConnection : Api.Data.Connection -> Api.Request ()
postConnection connection_body =
    Api.request
        "POST"
        "/connection"
        []
        []
        []
        (Just (Api.Data.encodeConnection connection_body))
        (Json.Decode.succeed ())



postKeywordsOpen : String -> Api.Request Api.Data.OpenVocabularyTerm
postKeywordsOpen body_body =
    Api.request
        "POST"
        "/keywords/open"
        []
        []
        []
        (Just (Json.Encode.string body_body))
        Api.Data.openVocabularyTermDecoder



{-| Upload a media file, providing the required fields returns the id of the media. A ShareStatus object is created automatically for this media record.
-}
postMedia : Api.Data.MediaRecord -> Api.Request Api.Data.MediaRecord
postMedia mediaRecord_body =
    Api.request
        "POST"
        "/media"
        []
        []
        []
        (Just (Api.Data.encodeMediaRecord mediaRecord_body))
        Api.Data.mediaRecordDecoder



postTag : String -> Api.Request Api.Data.OpenVocabularyTerm
postTag body_body =
    Api.request
        "POST"
        "/tags"
        []
        []
        []
        (Just (Json.Encode.string body_body))
        Api.Data.openVocabularyTermDecoder



postTextExpositionExport : String -> Maybe Type -> Api.Request String
postTextExpositionExport expositionId_path type__query =
    Api.request
        "POST"
        "/text-editor/export/{expositionId}"
        [ ( "expositionId", identity expositionId_path ) ]
        [ ( "type", Maybe.map stringFromType type__query ) ]
        []
        Nothing
        Json.Decode.string



postTextPage : String -> Api.Request Api.Data.TextExpositionPage
postTextPage expositionId_path =
    Api.request
        "POST"
        "/text-editor/page/{expositionId}"
        [ ( "expositionId", identity expositionId_path ) ]
        []
        []
        Nothing
        Api.Data.textExpositionPageDecoder



putConnection : String -> Api.Data.Connection -> Api.Request ()
putConnection connectionId_path connection_body =
    Api.request
        "PUT"
        "/connection/{connectionId}"
        [ ( "connectionId", identity connectionId_path ) ]
        []
        []
        (Just (Api.Data.encodeConnection connection_body))
        (Json.Decode.succeed ())



{-| Every time the text of a media record is edited or created, the markdown has to be parsed to recompute relationships between that markdown and the media records it references through !{} notation. 
-}
putMedia : String -> Api.Data.MediaRecord -> Api.Request Api.Data.MediaRecord
putMedia mediaId_path mediaRecord_body =
    Api.request
        "PUT"
        "/media/{mediaId}"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        (Just (Api.Data.encodeMediaRecord mediaRecord_body))
        Api.Data.mediaRecordDecoder



putMediaFile : String -> Maybe String -> Api.Request ()
putMediaFile mediaId_path file =
    Api.request
        "PUT"
        "/media/{mediaId}/file"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())



putMediaImportDoc : String -> Maybe String -> Api.Request Api.Data.MediaRecord
putMediaImportDoc mediaId_path file =
    Api.request
        "PUT"
        "/media/{mediaId}/import/doc"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        Api.Data.mediaRecordDecoder



putMediaImportFolder : String -> Maybe List String -> Api.Request Api.Data.MediaRecord
putMediaImportFolder mediaId_path filename =
    Api.request
        "PUT"
        "/media/{mediaId}/import/folder"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        Nothing
        Api.Data.mediaRecordDecoder



putMediaThumb : String -> String -> Api.Request ()
putMediaThumb mediaId_path body_body =
    Api.request
        "PUT"
        "/media/{mediaId}/thumb"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        (Just (Json.Decode.string body_body))
        (Json.Decode.succeed ())



putShareStatus : String -> Api.Data.ShareStatus -> Api.Request Api.Data.ShareStatus
putShareStatus mediaId_path shareStatus_body =
    Api.request
        "PUT"
        "/media/{mediaId}/shareStatus"
        [ ( "mediaId", identity mediaId_path ) ]
        []
        []
        (Just (Api.Data.encodeShareStatus shareStatus_body))
        Api.Data.shareStatusDecoder



putTextExposition : String -> Api.Data.TextExposition -> Api.Request Api.Data.TextExposition
putTextExposition expositionId_path textExposition_body =
    Api.request
        "PUT"
        "/text-editor/{expositionId}"
        [ ( "expositionId", identity expositionId_path ) ]
        []
        []
        (Just (Api.Data.encodeTextExposition textExposition_body))
        Api.Data.textExpositionDecoder
