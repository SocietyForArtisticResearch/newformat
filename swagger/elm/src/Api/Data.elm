{-
   Media Repository API
   The Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( ChannelPointer
    , Connection
    , CounterPointer, CounterPointerCounterType(..), counterPointerCounterTypeVariants
    , DateRange
    , InlineObject
    , InlineObject1
    , InlineObject2
    , License
    , MediaRecord, MediaRecordTranscodingStatus(..), mediaRecordTranscodingStatusVariants, MediaRecordMediaType(..), mediaRecordMediaTypeVariants
    , MediaRecordRecordType
    , MediaRecordText, MediaRecordTextTextType(..), mediaRecordTextTextTypeVariants
    , MultiLangString
    , ObjectPointer, ObjectPointerObjectType(..), objectPointerObjectTypeVariants
    , ObjectPointerPointer
    , OpenVocabularyTerm
    , Predicate
    , ProblemWithRCObject, ProblemWithRCObjectObjectType(..), problemWithRCObjectObjectTypeVariants, ProblemWithRCObjectProblem(..), problemWithRCObjectProblemVariants
    , SearchRequest, SearchRequestMediaType(..), searchRequestMediaTypeVariants
    , ShareStatus
    , ShareStatusRead
    , ShareStatusWrite
    , StorageUsage
    , TextExposition
    , TextExpositionPage
    , TextExpositionTocEntry
    , TextExpositionToolMeta
    , TimePointer
    , TwoDPointer, TwoDPointerUnit(..), twoDPointerUnitVariants
    , VocabularyTerm
    , encodeChannelPointer
    , encodeConnection
    , encodeCounterPointer
    , encodeDateRange
    , encodeInlineObject
    , encodeInlineObject1
    , encodeInlineObject2
    , encodeLicense
    , encodeMediaRecord
    , encodeMediaRecordRecordType
    , encodeMediaRecordText
    , encodeMultiLangString
    , encodeObjectPointer
    , encodeObjectPointerPointer
    , encodeOpenVocabularyTerm
    , encodePredicate
    , encodeProblemWithRCObject
    , encodeSearchRequest
    , encodeShareStatus
    , encodeShareStatusRead
    , encodeShareStatusWrite
    , encodeStorageUsage
    , encodeTextExposition
    , encodeTextExpositionPage
    , encodeTextExpositionTocEntry
    , encodeTextExpositionToolMeta
    , encodeTimePointer
    , encodeTwoDPointer
    , encodeVocabularyTerm
    , channelPointerDecoder
    , connectionDecoder
    , counterPointerDecoder
    , dateRangeDecoder
    , inlineObjectDecoder
    , inlineObject1Decoder
    , inlineObject2Decoder
    , licenseDecoder
    , mediaRecordDecoder
    , mediaRecordRecordTypeDecoder
    , mediaRecordTextDecoder
    , multiLangStringDecoder
    , objectPointerDecoder
    , objectPointerPointerDecoder
    , openVocabularyTermDecoder
    , predicateDecoder
    , problemWithRCObjectDecoder
    , searchRequestDecoder
    , shareStatusDecoder
    , shareStatusReadDecoder
    , shareStatusWriteDecoder
    , storageUsageDecoder
    , textExpositionDecoder
    , textExpositionPageDecoder
    , textExpositionTocEntryDecoder
    , textExpositionToolMetaDecoder
    , timePointerDecoder
    , twoDPointerDecoder
    , vocabularyTermDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias ChannelPointer =
    { channel : Float
    , totalChannels : Int
    }


type alias Connection =
    { id : Maybe String
    , subject : ObjectPointer
    , predicate : String
    , object : ObjectPointer
    }


type alias CounterPointer =
    { counterType : CounterPointerCounterType
    , counter : Int
    }


type CounterPointerCounterType
    = CounterPointerCounterTypeCharacter
    | CounterPointerCounterTypeByte
    | CounterPointerCounterTypePage


counterPointerCounterTypeVariants : List CounterPointerCounterType
counterPointerCounterTypeVariants =
    [ CounterPointerCounterTypeCharacter
    , CounterPointerCounterTypeByte
    , CounterPointerCounterTypePage
    ]


{-| A temporal range between included but optional start and end points
-}
type alias DateRange =
    { start : Maybe Posix
    , end : Maybe Posix
    }


type alias InlineObject =
    { file : Maybe String
    }


type alias InlineObject1 =
    { file : Maybe String
    }


type alias InlineObject2 =
    { filename : Maybe (List (String))
    }


{-| A license
-}
type alias License =
    { id : String
    , externalURI : String
    , name : Maybe String
    }


type alias MediaRecord =
    { id : Maybe String
    , text : Maybe MediaRecordText
    , transcodingStatus : Maybe MediaRecordTranscodingStatus
    , width : Maybe Int
    , height : Maybe Int
    , title : String
    , copyright : String
    , license : String
    , description : Maybe String
    , creator : Maybe String
    , mediaType : Maybe MediaRecordMediaType
    , parents : Maybe (List (String))
    , keywordsClosed : Maybe (List (String))
    , keywordsOpen : Maybe (List (String))
    , tags : Maybe (List (String))
    , recordType : Maybe MediaRecordRecordType
    , creationDate : Maybe Posix
    , modifiedDate : Maybe Posix
    , mediaDate : Maybe Posix
    , connections : Maybe (List (Connection))
    }


type MediaRecordTranscodingStatus
    = MediaRecordTranscodingStatusNoFile
    | MediaRecordTranscodingStatusInProgress
    | MediaRecordTranscodingStatusFailed
    | MediaRecordTranscodingStatusTranscoded


mediaRecordTranscodingStatusVariants : List MediaRecordTranscodingStatus
mediaRecordTranscodingStatusVariants =
    [ MediaRecordTranscodingStatusNoFile
    , MediaRecordTranscodingStatusInProgress
    , MediaRecordTranscodingStatusFailed
    , MediaRecordTranscodingStatusTranscoded
    ]


type MediaRecordMediaType
    = MediaRecordMediaTypeVideo
    | MediaRecordMediaTypeAudio
    | MediaRecordMediaTypeImage
    | MediaRecordMediaTypeSvg
    | MediaRecordMediaTypePdf
    | MediaRecordMediaTypeText


mediaRecordMediaTypeVariants : List MediaRecordMediaType
mediaRecordMediaTypeVariants =
    [ MediaRecordMediaTypeVideo
    , MediaRecordMediaTypeAudio
    , MediaRecordMediaTypeImage
    , MediaRecordMediaTypeSvg
    , MediaRecordMediaTypePdf
    , MediaRecordMediaTypeText
    ]


{-| Type obtained from the portfolio API ...
-}
type alias MediaRecordRecordType =
    { id : Maybe String
    , metadata : Maybe Object
    }


type alias MediaRecordText =
    { textType : Maybe MediaRecordTextTextType
    , content : Maybe String
    }


type MediaRecordTextTextType
    = MediaRecordTextTextTypeMarkdown
    | MediaRecordTextTextTypeAltText
    | MediaRecordTextTextTypeHtml
    | MediaRecordTextTextTypePlain


mediaRecordTextTextTypeVariants : List MediaRecordTextTextType
mediaRecordTextTextTypeVariants =
    [ MediaRecordTextTextTypeMarkdown
    , MediaRecordTextTextTypeAltText
    , MediaRecordTextTextTypeHtml
    , MediaRecordTextTextTypePlain
    ]


{-| a string with language tag
-}
type alias MultiLangString =
    { lang : String
    , value : String
    }


type alias ObjectPointer =
    { objectType : ObjectPointerObjectType
    , id : String
    , pointer : Maybe ObjectPointerPointer
    }


type ObjectPointerObjectType
    = ObjectPointerObjectTypeMediaRecord
    | ObjectPointerObjectTypeExposition


objectPointerObjectTypeVariants : List ObjectPointerObjectType
objectPointerObjectTypeVariants =
    [ ObjectPointerObjectTypeMediaRecord
    , ObjectPointerObjectTypeExposition
    ]


type alias ObjectPointerPointer =
    { timePointer : Maybe TimePointer
    , twoDPointer : Maybe TwoDPointer
    , counterPointer : Maybe CounterPointer
    , channelPointer : Maybe ChannelPointer
    }


{-| a term from a open vocabulary
-}
type alias OpenVocabularyTerm =
    { id : Maybe String
    , term : String
    }


{-| a predicate used in a connection
-}
type alias Predicate =
    { id : Maybe String
    , predicate : String
    , uri : Maybe String
    }


{-| Problem with an expositon or media record
-}
type alias ProblemWithRCObject =
    { objectType : ProblemWithRCObjectObjectType
    , id : String
    , problem : ProblemWithRCObjectProblem
    }


type ProblemWithRCObjectObjectType
    = ProblemWithRCObjectObjectTypeMediaRecord
    | ProblemWithRCObjectObjectTypeExposition


problemWithRCObjectObjectTypeVariants : List ProblemWithRCObjectObjectType
problemWithRCObjectObjectTypeVariants =
    [ ProblemWithRCObjectObjectTypeMediaRecord
    , ProblemWithRCObjectObjectTypeExposition
    ]


type ProblemWithRCObjectProblem
    = ProblemWithRCObjectProblemDoesNotExist
    | ProblemWithRCObjectProblemInsufficientPermissions
    | ProblemWithRCObjectProblemConflict


problemWithRCObjectProblemVariants : List ProblemWithRCObjectProblem
problemWithRCObjectProblemVariants =
    [ ProblemWithRCObjectProblemDoesNotExist
    , ProblemWithRCObjectProblemInsufficientPermissions
    , ProblemWithRCObjectProblemConflict
    ]


{-| An object to filter searches for media records
-}
type alias SearchRequest =
    { creator : Maybe String
    , title : Maybe String
    , mediaType : Maybe SearchRequestMediaType
    , recordType : Maybe String
    , creationDate : Maybe DateRange
    , modificationDate : Maybe DateRange
    , date : Maybe DateRange
    , license : Maybe String
    , copyright : Maybe String
    , tag : Maybe (List (String))
    , keywordsClosed : Maybe (List (String))
    , keywordsOpen : Maybe (List (String))
    , textContent : Maybe String
    , connectedTo : Maybe (List (String))
    }


type SearchRequestMediaType
    = SearchRequestMediaTypeVideo
    | SearchRequestMediaTypeAudio
    | SearchRequestMediaTypeImage
    | SearchRequestMediaTypeSvg
    | SearchRequestMediaTypePdf
    | SearchRequestMediaTypeText


searchRequestMediaTypeVariants : List SearchRequestMediaType
searchRequestMediaTypeVariants =
    [ SearchRequestMediaTypeVideo
    , SearchRequestMediaTypeAudio
    , SearchRequestMediaTypeImage
    , SearchRequestMediaTypeSvg
    , SearchRequestMediaTypePdf
    , SearchRequestMediaTypeText
    ]


{-| Read and write permssions for users that are not the creator
-}
type alias ShareStatus =
    { read : ShareStatusRead
    , write : ShareStatusWrite
    }


type alias ShareStatusRead =
    { users : List (String)
    , public : Bool
    }


type alias ShareStatusWrite =
    { users : List (String)
    }


{-| See the space used by a user
-}
type alias StorageUsage =
    { used : Float
    }


{-| An exposition with text-based pages
-}
type alias TextExposition =
    { pages : List (TextExpositionPage)
    , toolMeta : List (TextExpositionToolMeta)
    , title : String
    , style : String
    , id : Maybe String
    , editorVersion : String
    , contentVersion : Int
    , toc : List (TextExpositionTocEntry)
    }


{-| A text-based exposition page
-}
type alias TextExpositionPage =
    { title : String
    , html : String
    , markdown : String
    , pageId : Maybe Int
    }


{-| An entry in the table of contents
-}
type alias TextExpositionTocEntry =
    { level : Int
    , title : String
    , id : String
    , page : Int
    }


{-| Style and caption information for media
-}
type alias TextExpositionToolMeta =
    { mediaId : String
    , caption : Maybe String
    , userClass : Maybe String
    }


type alias TimePointer =
    { hours : Int
    , minutes : Int
    , seconds : Int
    , milliseconds : Int
    }


type alias TwoDPointer =
    { unit : TwoDPointerUnit
    , x : Float
    , y : Float
    }


type TwoDPointerUnit
    = TwoDPointerUnitPerc
    | TwoDPointerUnitPixel


twoDPointerUnitVariants : List TwoDPointerUnit
twoDPointerUnitVariants =
    [ TwoDPointerUnitPerc
    , TwoDPointerUnitPixel
    ]


{-| a term from a closed vocabulary
-}
type alias VocabularyTerm =
    { id : Maybe String
    , externalURI : Maybe String
    , terms : List (MultiLangString)
    }


-- ENCODER


encodeChannelPointer : ChannelPointer -> Json.Encode.Value
encodeChannelPointer =
    encodeObject << encodeChannelPointerPairs


encodeChannelPointerWithTag : ( String, String ) -> ChannelPointer -> Json.Encode.Value
encodeChannelPointerWithTag (tagField, tag) model =
    encodeObject (encodeChannelPointerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChannelPointerPairs : ChannelPointer -> List EncodedField
encodeChannelPointerPairs model =
    let
        pairs =
            [ encode "channel" Json.Encode.float model.channel
            , encode "totalChannels" Json.Encode.int model.totalChannels
            ]
    in
    pairs


encodeConnection : Connection -> Json.Encode.Value
encodeConnection =
    encodeObject << encodeConnectionPairs


encodeConnectionWithTag : ( String, String ) -> Connection -> Json.Encode.Value
encodeConnectionWithTag (tagField, tag) model =
    encodeObject (encodeConnectionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeConnectionPairs : Connection -> List EncodedField
encodeConnectionPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , encode "subject" encodeObjectPointer model.subject
            , encode "predicate" Json.Encode.string model.predicate
            , encode "object" encodeObjectPointer model.object
            ]
    in
    pairs


encodeCounterPointer : CounterPointer -> Json.Encode.Value
encodeCounterPointer =
    encodeObject << encodeCounterPointerPairs


encodeCounterPointerWithTag : ( String, String ) -> CounterPointer -> Json.Encode.Value
encodeCounterPointerWithTag (tagField, tag) model =
    encodeObject (encodeCounterPointerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCounterPointerPairs : CounterPointer -> List EncodedField
encodeCounterPointerPairs model =
    let
        pairs =
            [ encode "counterType"  model.counterType
            , encode "counter" Json.Encode.int model.counter
            ]
    in
    pairs

stringFromCounterPointerCounterType : CounterPointerCounterType -> String
stringFromCounterPointerCounterType model =
    case model of
        CounterPointerCounterTypeCharacter ->
            "character"

        CounterPointerCounterTypeByte ->
            "byte"

        CounterPointerCounterTypePage ->
            "page"


encodeCounterPointerCounterType : CounterPointerCounterType -> Json.Encode.Value
encodeCounterPointerCounterType =
    Json.Encode.string << stringFromCounterPointerCounterType



encodeDateRange : DateRange -> Json.Encode.Value
encodeDateRange =
    encodeObject << encodeDateRangePairs


encodeDateRangeWithTag : ( String, String ) -> DateRange -> Json.Encode.Value
encodeDateRangeWithTag (tagField, tag) model =
    encodeObject (encodeDateRangePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDateRangePairs : DateRange -> List EncodedField
encodeDateRangePairs model =
    let
        pairs =
            [ maybeEncode "start" Api.Time.encodeDate model.start
            , maybeEncode "end" Api.Time.encodeDate model.end
            ]
    in
    pairs


encodeInlineObject : InlineObject -> Json.Encode.Value
encodeInlineObject =
    encodeObject << encodeInlineObjectPairs


encodeInlineObjectWithTag : ( String, String ) -> InlineObject -> Json.Encode.Value
encodeInlineObjectWithTag (tagField, tag) model =
    encodeObject (encodeInlineObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObjectPairs : InlineObject -> List EncodedField
encodeInlineObjectPairs model =
    let
        pairs =
            [ maybeEncode "file" Json.Decode.string model.file
            ]
    in
    pairs


encodeInlineObject1 : InlineObject1 -> Json.Encode.Value
encodeInlineObject1 =
    encodeObject << encodeInlineObject1Pairs


encodeInlineObject1WithTag : ( String, String ) -> InlineObject1 -> Json.Encode.Value
encodeInlineObject1WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject1Pairs : InlineObject1 -> List EncodedField
encodeInlineObject1Pairs model =
    let
        pairs =
            [ maybeEncode "file" Json.Decode.string model.file
            ]
    in
    pairs


encodeInlineObject2 : InlineObject2 -> Json.Encode.Value
encodeInlineObject2 =
    encodeObject << encodeInlineObject2Pairs


encodeInlineObject2WithTag : ( String, String ) -> InlineObject2 -> Json.Encode.Value
encodeInlineObject2WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject2Pairs : InlineObject2 -> List EncodedField
encodeInlineObject2Pairs model =
    let
        pairs =
            [ maybeEncode "filename" (Json.Encode.list Json.Decode.string) model.filename
            ]
    in
    pairs


encodeLicense : License -> Json.Encode.Value
encodeLicense =
    encodeObject << encodeLicensePairs


encodeLicenseWithTag : ( String, String ) -> License -> Json.Encode.Value
encodeLicenseWithTag (tagField, tag) model =
    encodeObject (encodeLicensePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLicensePairs : License -> List EncodedField
encodeLicensePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "externalURI" Json.Encode.string model.externalURI
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeMediaRecord : MediaRecord -> Json.Encode.Value
encodeMediaRecord =
    encodeObject << encodeMediaRecordPairs


encodeMediaRecordWithTag : ( String, String ) -> MediaRecord -> Json.Encode.Value
encodeMediaRecordWithTag (tagField, tag) model =
    encodeObject (encodeMediaRecordPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMediaRecordPairs : MediaRecord -> List EncodedField
encodeMediaRecordPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "text" encodeMediaRecordText model.text
            , maybeEncode "transcodingStatus"  model.transcodingStatus
            , maybeEncode "width" Json.Encode.int model.width
            , maybeEncode "height" Json.Encode.int model.height
            , encode "title" Json.Encode.string model.title
            , encode "copyright" Json.Encode.string model.copyright
            , encode "license" Json.Encode.string model.license
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "creator" Json.Encode.string model.creator
            , maybeEncode "mediaType"  model.mediaType
            , maybeEncode "parents" (Json.Encode.list Json.Encode.string) model.parents
            , maybeEncode "keywordsClosed" (Json.Encode.list Json.Encode.string) model.keywordsClosed
            , maybeEncode "keywordsOpen" (Json.Encode.list Json.Encode.string) model.keywordsOpen
            , maybeEncode "tags" (Json.Encode.list Json.Encode.string) model.tags
            , maybeEncode "recordType" encodeMediaRecordRecordType model.recordType
            , maybeEncode "creationDate" Api.Time.encodeDate model.creationDate
            , maybeEncode "modifiedDate" Api.Time.encodeDate model.modifiedDate
            , maybeEncode "mediaDate" Api.Time.encodeDate model.mediaDate
            , maybeEncode "connections" (Json.Encode.list encodeConnection) model.connections
            ]
    in
    pairs

stringFromMediaRecordTranscodingStatus : MediaRecordTranscodingStatus -> String
stringFromMediaRecordTranscodingStatus model =
    case model of
        MediaRecordTranscodingStatusNoFile ->
            "noFile"

        MediaRecordTranscodingStatusInProgress ->
            "inProgress"

        MediaRecordTranscodingStatusFailed ->
            "failed"

        MediaRecordTranscodingStatusTranscoded ->
            "transcoded"


encodeMediaRecordTranscodingStatus : MediaRecordTranscodingStatus -> Json.Encode.Value
encodeMediaRecordTranscodingStatus =
    Json.Encode.string << stringFromMediaRecordTranscodingStatus


stringFromMediaRecordMediaType : MediaRecordMediaType -> String
stringFromMediaRecordMediaType model =
    case model of
        MediaRecordMediaTypeVideo ->
            "video"

        MediaRecordMediaTypeAudio ->
            "audio"

        MediaRecordMediaTypeImage ->
            "image"

        MediaRecordMediaTypeSvg ->
            "svg"

        MediaRecordMediaTypePdf ->
            "pdf"

        MediaRecordMediaTypeText ->
            "text"


encodeMediaRecordMediaType : MediaRecordMediaType -> Json.Encode.Value
encodeMediaRecordMediaType =
    Json.Encode.string << stringFromMediaRecordMediaType



encodeMediaRecordRecordType : MediaRecordRecordType -> Json.Encode.Value
encodeMediaRecordRecordType =
    encodeObject << encodeMediaRecordRecordTypePairs


encodeMediaRecordRecordTypeWithTag : ( String, String ) -> MediaRecordRecordType -> Json.Encode.Value
encodeMediaRecordRecordTypeWithTag (tagField, tag) model =
    encodeObject (encodeMediaRecordRecordTypePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMediaRecordRecordTypePairs : MediaRecordRecordType -> List EncodedField
encodeMediaRecordRecordTypePairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeMediaRecordText : MediaRecordText -> Json.Encode.Value
encodeMediaRecordText =
    encodeObject << encodeMediaRecordTextPairs


encodeMediaRecordTextWithTag : ( String, String ) -> MediaRecordText -> Json.Encode.Value
encodeMediaRecordTextWithTag (tagField, tag) model =
    encodeObject (encodeMediaRecordTextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMediaRecordTextPairs : MediaRecordText -> List EncodedField
encodeMediaRecordTextPairs model =
    let
        pairs =
            [ maybeEncode "textType"  model.textType
            , maybeEncode "content" Json.Encode.string model.content
            ]
    in
    pairs

stringFromMediaRecordTextTextType : MediaRecordTextTextType -> String
stringFromMediaRecordTextTextType model =
    case model of
        MediaRecordTextTextTypeMarkdown ->
            "markdown"

        MediaRecordTextTextTypeAltText ->
            "altText"

        MediaRecordTextTextTypeHtml ->
            "html"

        MediaRecordTextTextTypePlain ->
            "plain"


encodeMediaRecordTextTextType : MediaRecordTextTextType -> Json.Encode.Value
encodeMediaRecordTextTextType =
    Json.Encode.string << stringFromMediaRecordTextTextType



encodeMultiLangString : MultiLangString -> Json.Encode.Value
encodeMultiLangString =
    encodeObject << encodeMultiLangStringPairs


encodeMultiLangStringWithTag : ( String, String ) -> MultiLangString -> Json.Encode.Value
encodeMultiLangStringWithTag (tagField, tag) model =
    encodeObject (encodeMultiLangStringPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMultiLangStringPairs : MultiLangString -> List EncodedField
encodeMultiLangStringPairs model =
    let
        pairs =
            [ encode "lang" Json.Encode.string model.lang
            , encode "value" Json.Encode.string model.value
            ]
    in
    pairs


encodeObjectPointer : ObjectPointer -> Json.Encode.Value
encodeObjectPointer =
    encodeObject << encodeObjectPointerPairs


encodeObjectPointerWithTag : ( String, String ) -> ObjectPointer -> Json.Encode.Value
encodeObjectPointerWithTag (tagField, tag) model =
    encodeObject (encodeObjectPointerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeObjectPointerPairs : ObjectPointer -> List EncodedField
encodeObjectPointerPairs model =
    let
        pairs =
            [ encode "objectType"  model.objectType
            , encode "id" Json.Encode.string model.id
            , maybeEncode "pointer" encodeObjectPointerPointer model.pointer
            ]
    in
    pairs

stringFromObjectPointerObjectType : ObjectPointerObjectType -> String
stringFromObjectPointerObjectType model =
    case model of
        ObjectPointerObjectTypeMediaRecord ->
            "mediaRecord"

        ObjectPointerObjectTypeExposition ->
            "exposition"


encodeObjectPointerObjectType : ObjectPointerObjectType -> Json.Encode.Value
encodeObjectPointerObjectType =
    Json.Encode.string << stringFromObjectPointerObjectType



encodeObjectPointerPointer : ObjectPointerPointer -> Json.Encode.Value
encodeObjectPointerPointer =
    encodeObject << encodeObjectPointerPointerPairs


encodeObjectPointerPointerWithTag : ( String, String ) -> ObjectPointerPointer -> Json.Encode.Value
encodeObjectPointerPointerWithTag (tagField, tag) model =
    encodeObject (encodeObjectPointerPointerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeObjectPointerPointerPairs : ObjectPointerPointer -> List EncodedField
encodeObjectPointerPointerPairs model =
    let
        pairs =
            [ maybeEncode "timePointer" encodeTimePointer model.timePointer
            , maybeEncode "twoDPointer" encodeTwoDPointer model.twoDPointer
            , maybeEncode "counterPointer" encodeCounterPointer model.counterPointer
            , maybeEncode "channelPointer" encodeChannelPointer model.channelPointer
            ]
    in
    pairs


encodeOpenVocabularyTerm : OpenVocabularyTerm -> Json.Encode.Value
encodeOpenVocabularyTerm =
    encodeObject << encodeOpenVocabularyTermPairs


encodeOpenVocabularyTermWithTag : ( String, String ) -> OpenVocabularyTerm -> Json.Encode.Value
encodeOpenVocabularyTermWithTag (tagField, tag) model =
    encodeObject (encodeOpenVocabularyTermPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOpenVocabularyTermPairs : OpenVocabularyTerm -> List EncodedField
encodeOpenVocabularyTermPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , encode "term" Json.Encode.string model.term
            ]
    in
    pairs


encodePredicate : Predicate -> Json.Encode.Value
encodePredicate =
    encodeObject << encodePredicatePairs


encodePredicateWithTag : ( String, String ) -> Predicate -> Json.Encode.Value
encodePredicateWithTag (tagField, tag) model =
    encodeObject (encodePredicatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodePredicatePairs : Predicate -> List EncodedField
encodePredicatePairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , encode "predicate" Json.Encode.string model.predicate
            , maybeEncode "uri" Json.Encode.string model.uri
            ]
    in
    pairs


encodeProblemWithRCObject : ProblemWithRCObject -> Json.Encode.Value
encodeProblemWithRCObject =
    encodeObject << encodeProblemWithRCObjectPairs


encodeProblemWithRCObjectWithTag : ( String, String ) -> ProblemWithRCObject -> Json.Encode.Value
encodeProblemWithRCObjectWithTag (tagField, tag) model =
    encodeObject (encodeProblemWithRCObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeProblemWithRCObjectPairs : ProblemWithRCObject -> List EncodedField
encodeProblemWithRCObjectPairs model =
    let
        pairs =
            [ encode "objectType"  model.objectType
            , encode "id" Json.Encode.string model.id
            , encode "problem"  model.problem
            ]
    in
    pairs

stringFromProblemWithRCObjectObjectType : ProblemWithRCObjectObjectType -> String
stringFromProblemWithRCObjectObjectType model =
    case model of
        ProblemWithRCObjectObjectTypeMediaRecord ->
            "mediaRecord"

        ProblemWithRCObjectObjectTypeExposition ->
            "exposition"


encodeProblemWithRCObjectObjectType : ProblemWithRCObjectObjectType -> Json.Encode.Value
encodeProblemWithRCObjectObjectType =
    Json.Encode.string << stringFromProblemWithRCObjectObjectType


stringFromProblemWithRCObjectProblem : ProblemWithRCObjectProblem -> String
stringFromProblemWithRCObjectProblem model =
    case model of
        ProblemWithRCObjectProblemDoesNotExist ->
            "does not exist"

        ProblemWithRCObjectProblemInsufficientPermissions ->
            "insufficient permissions"

        ProblemWithRCObjectProblemConflict ->
            "conflict"


encodeProblemWithRCObjectProblem : ProblemWithRCObjectProblem -> Json.Encode.Value
encodeProblemWithRCObjectProblem =
    Json.Encode.string << stringFromProblemWithRCObjectProblem



encodeSearchRequest : SearchRequest -> Json.Encode.Value
encodeSearchRequest =
    encodeObject << encodeSearchRequestPairs


encodeSearchRequestWithTag : ( String, String ) -> SearchRequest -> Json.Encode.Value
encodeSearchRequestWithTag (tagField, tag) model =
    encodeObject (encodeSearchRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRequestPairs : SearchRequest -> List EncodedField
encodeSearchRequestPairs model =
    let
        pairs =
            [ maybeEncode "creator" Json.Encode.string model.creator
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "mediaType"  model.mediaType
            , maybeEncode "recordType" Json.Encode.string model.recordType
            , maybeEncode "creationDate" encodeDateRange model.creationDate
            , maybeEncode "modificationDate" encodeDateRange model.modificationDate
            , maybeEncode "date" encodeDateRange model.date
            , maybeEncode "license" Json.Encode.string model.license
            , maybeEncode "copyright" Json.Encode.string model.copyright
            , maybeEncode "tag" (Json.Encode.list Json.Encode.string) model.tag
            , maybeEncode "keywordsClosed" (Json.Encode.list Json.Encode.string) model.keywordsClosed
            , maybeEncode "keywordsOpen" (Json.Encode.list Json.Encode.string) model.keywordsOpen
            , maybeEncode "textContent" Json.Encode.string model.textContent
            , maybeEncode "connectedTo" (Json.Encode.list Json.Encode.string) model.connectedTo
            ]
    in
    pairs

stringFromSearchRequestMediaType : SearchRequestMediaType -> String
stringFromSearchRequestMediaType model =
    case model of
        SearchRequestMediaTypeVideo ->
            "video"

        SearchRequestMediaTypeAudio ->
            "audio"

        SearchRequestMediaTypeImage ->
            "image"

        SearchRequestMediaTypeSvg ->
            "svg"

        SearchRequestMediaTypePdf ->
            "pdf"

        SearchRequestMediaTypeText ->
            "text"


encodeSearchRequestMediaType : SearchRequestMediaType -> Json.Encode.Value
encodeSearchRequestMediaType =
    Json.Encode.string << stringFromSearchRequestMediaType



encodeShareStatus : ShareStatus -> Json.Encode.Value
encodeShareStatus =
    encodeObject << encodeShareStatusPairs


encodeShareStatusWithTag : ( String, String ) -> ShareStatus -> Json.Encode.Value
encodeShareStatusWithTag (tagField, tag) model =
    encodeObject (encodeShareStatusPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShareStatusPairs : ShareStatus -> List EncodedField
encodeShareStatusPairs model =
    let
        pairs =
            [ encode "read" encodeShareStatusRead model.read
            , encode "write" encodeShareStatusWrite model.write
            ]
    in
    pairs


encodeShareStatusRead : ShareStatusRead -> Json.Encode.Value
encodeShareStatusRead =
    encodeObject << encodeShareStatusReadPairs


encodeShareStatusReadWithTag : ( String, String ) -> ShareStatusRead -> Json.Encode.Value
encodeShareStatusReadWithTag (tagField, tag) model =
    encodeObject (encodeShareStatusReadPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShareStatusReadPairs : ShareStatusRead -> List EncodedField
encodeShareStatusReadPairs model =
    let
        pairs =
            [ encode "users" (Json.Encode.list Json.Encode.string) model.users
            , encode "public" Json.Encode.bool model.public
            ]
    in
    pairs


encodeShareStatusWrite : ShareStatusWrite -> Json.Encode.Value
encodeShareStatusWrite =
    encodeObject << encodeShareStatusWritePairs


encodeShareStatusWriteWithTag : ( String, String ) -> ShareStatusWrite -> Json.Encode.Value
encodeShareStatusWriteWithTag (tagField, tag) model =
    encodeObject (encodeShareStatusWritePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShareStatusWritePairs : ShareStatusWrite -> List EncodedField
encodeShareStatusWritePairs model =
    let
        pairs =
            [ encode "users" (Json.Encode.list Json.Encode.string) model.users
            ]
    in
    pairs


encodeStorageUsage : StorageUsage -> Json.Encode.Value
encodeStorageUsage =
    encodeObject << encodeStorageUsagePairs


encodeStorageUsageWithTag : ( String, String ) -> StorageUsage -> Json.Encode.Value
encodeStorageUsageWithTag (tagField, tag) model =
    encodeObject (encodeStorageUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeStorageUsagePairs : StorageUsage -> List EncodedField
encodeStorageUsagePairs model =
    let
        pairs =
            [ encode "used" Json.Encode.float model.used
            ]
    in
    pairs


encodeTextExposition : TextExposition -> Json.Encode.Value
encodeTextExposition =
    encodeObject << encodeTextExpositionPairs


encodeTextExpositionWithTag : ( String, String ) -> TextExposition -> Json.Encode.Value
encodeTextExpositionWithTag (tagField, tag) model =
    encodeObject (encodeTextExpositionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTextExpositionPairs : TextExposition -> List EncodedField
encodeTextExpositionPairs model =
    let
        pairs =
            [ encode "pages" (Json.Encode.list encodeTextExpositionPage) model.pages
            , encode "toolMeta" (Json.Encode.list encodeTextExpositionToolMeta) model.toolMeta
            , encode "title" Json.Encode.string model.title
            , encode "style" Json.Encode.string model.style
            , maybeEncode "id" Json.Encode.string model.id
            , encode "editorVersion" Json.Encode.string model.editorVersion
            , encode "contentVersion" Json.Encode.int model.contentVersion
            , encode "toc" (Json.Encode.list encodeTextExpositionTocEntry) model.toc
            ]
    in
    pairs


encodeTextExpositionPage : TextExpositionPage -> Json.Encode.Value
encodeTextExpositionPage =
    encodeObject << encodeTextExpositionPagePairs


encodeTextExpositionPageWithTag : ( String, String ) -> TextExpositionPage -> Json.Encode.Value
encodeTextExpositionPageWithTag (tagField, tag) model =
    encodeObject (encodeTextExpositionPagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTextExpositionPagePairs : TextExpositionPage -> List EncodedField
encodeTextExpositionPagePairs model =
    let
        pairs =
            [ encode "title" Json.Encode.string model.title
            , encode "html" Json.Encode.string model.html
            , encode "markdown" Json.Encode.string model.markdown
            , maybeEncode "pageId" Json.Encode.int model.pageId
            ]
    in
    pairs


encodeTextExpositionTocEntry : TextExpositionTocEntry -> Json.Encode.Value
encodeTextExpositionTocEntry =
    encodeObject << encodeTextExpositionTocEntryPairs


encodeTextExpositionTocEntryWithTag : ( String, String ) -> TextExpositionTocEntry -> Json.Encode.Value
encodeTextExpositionTocEntryWithTag (tagField, tag) model =
    encodeObject (encodeTextExpositionTocEntryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTextExpositionTocEntryPairs : TextExpositionTocEntry -> List EncodedField
encodeTextExpositionTocEntryPairs model =
    let
        pairs =
            [ encode "level" Json.Encode.int model.level
            , encode "title" Json.Encode.string model.title
            , encode "id" Json.Encode.string model.id
            , encode "page" Json.Encode.int model.page
            ]
    in
    pairs


encodeTextExpositionToolMeta : TextExpositionToolMeta -> Json.Encode.Value
encodeTextExpositionToolMeta =
    encodeObject << encodeTextExpositionToolMetaPairs


encodeTextExpositionToolMetaWithTag : ( String, String ) -> TextExpositionToolMeta -> Json.Encode.Value
encodeTextExpositionToolMetaWithTag (tagField, tag) model =
    encodeObject (encodeTextExpositionToolMetaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTextExpositionToolMetaPairs : TextExpositionToolMeta -> List EncodedField
encodeTextExpositionToolMetaPairs model =
    let
        pairs =
            [ encode "mediaId" Json.Encode.string model.mediaId
            , maybeEncode "caption" Json.Encode.string model.caption
            , maybeEncode "userClass" Json.Encode.string model.userClass
            ]
    in
    pairs


encodeTimePointer : TimePointer -> Json.Encode.Value
encodeTimePointer =
    encodeObject << encodeTimePointerPairs


encodeTimePointerWithTag : ( String, String ) -> TimePointer -> Json.Encode.Value
encodeTimePointerWithTag (tagField, tag) model =
    encodeObject (encodeTimePointerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTimePointerPairs : TimePointer -> List EncodedField
encodeTimePointerPairs model =
    let
        pairs =
            [ encode "hours" Json.Encode.int model.hours
            , encode "minutes" Json.Encode.int model.minutes
            , encode "seconds" Json.Encode.int model.seconds
            , encode "milliseconds" Json.Encode.int model.milliseconds
            ]
    in
    pairs


encodeTwoDPointer : TwoDPointer -> Json.Encode.Value
encodeTwoDPointer =
    encodeObject << encodeTwoDPointerPairs


encodeTwoDPointerWithTag : ( String, String ) -> TwoDPointer -> Json.Encode.Value
encodeTwoDPointerWithTag (tagField, tag) model =
    encodeObject (encodeTwoDPointerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTwoDPointerPairs : TwoDPointer -> List EncodedField
encodeTwoDPointerPairs model =
    let
        pairs =
            [ encode "unit"  model.unit
            , encode "x" Json.Encode.float model.x
            , encode "y" Json.Encode.float model.y
            ]
    in
    pairs

stringFromTwoDPointerUnit : TwoDPointerUnit -> String
stringFromTwoDPointerUnit model =
    case model of
        TwoDPointerUnitPerc ->
            "perc"

        TwoDPointerUnitPixel ->
            "pixel"


encodeTwoDPointerUnit : TwoDPointerUnit -> Json.Encode.Value
encodeTwoDPointerUnit =
    Json.Encode.string << stringFromTwoDPointerUnit



encodeVocabularyTerm : VocabularyTerm -> Json.Encode.Value
encodeVocabularyTerm =
    encodeObject << encodeVocabularyTermPairs


encodeVocabularyTermWithTag : ( String, String ) -> VocabularyTerm -> Json.Encode.Value
encodeVocabularyTermWithTag (tagField, tag) model =
    encodeObject (encodeVocabularyTermPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVocabularyTermPairs : VocabularyTerm -> List EncodedField
encodeVocabularyTermPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "externalURI" Json.Encode.string model.externalURI
            , encode "terms" (Json.Encode.list encodeMultiLangString) model.terms
            ]
    in
    pairs


-- DECODER


channelPointerDecoder : Json.Decode.Decoder ChannelPointer
channelPointerDecoder =
    Json.Decode.succeed ChannelPointer
        |> decode "channel" Json.Decode.float 
        |> decode "totalChannels" Json.Decode.int 


connectionDecoder : Json.Decode.Decoder Connection
connectionDecoder =
    Json.Decode.succeed Connection
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "subject" objectPointerDecoder 
        |> decode "predicate" Json.Decode.string 
        |> decode "object" objectPointerDecoder 


counterPointerDecoder : Json.Decode.Decoder CounterPointer
counterPointerDecoder =
    Json.Decode.succeed CounterPointer
        |> decode "counterType"  
        |> decode "counter" Json.Decode.int 


counterPointerCounterTypeDecoder : Json.Decode.Decoder CounterPointerCounterType
counterPointerCounterTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "character" ->
                        Json.Decode.succeed CounterPointerCounterTypeCharacter

                    "byte" ->
                        Json.Decode.succeed CounterPointerCounterTypeByte

                    "page" ->
                        Json.Decode.succeed CounterPointerCounterTypePage

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



dateRangeDecoder : Json.Decode.Decoder DateRange
dateRangeDecoder =
    Json.Decode.succeed DateRange
        |> maybeDecode "start" Api.Time.dateDecoder Nothing
        |> maybeDecode "end" Api.Time.dateDecoder Nothing


inlineObjectDecoder : Json.Decode.Decoder InlineObject
inlineObjectDecoder =
    Json.Decode.succeed InlineObject
        |> maybeDecode "file" Json.Decode.string Nothing


inlineObject1Decoder : Json.Decode.Decoder InlineObject1
inlineObject1Decoder =
    Json.Decode.succeed InlineObject1
        |> maybeDecode "file" Json.Decode.string Nothing


inlineObject2Decoder : Json.Decode.Decoder InlineObject2
inlineObject2Decoder =
    Json.Decode.succeed InlineObject2
        |> maybeDecode "filename" (Json.Decode.list Json.Decode.string) Nothing


licenseDecoder : Json.Decode.Decoder License
licenseDecoder =
    Json.Decode.succeed License
        |> decode "id" Json.Decode.string 
        |> decode "externalURI" Json.Decode.string 
        |> maybeDecode "name" Json.Decode.string Nothing


mediaRecordDecoder : Json.Decode.Decoder MediaRecord
mediaRecordDecoder =
    Json.Decode.succeed MediaRecord
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "text" mediaRecordTextDecoder Nothing
        |> maybeDecode "transcodingStatus"  Nothing
        |> maybeDecode "width" Json.Decode.int Nothing
        |> maybeDecode "height" Json.Decode.int Nothing
        |> decode "title" Json.Decode.string 
        |> decode "copyright" Json.Decode.string 
        |> decode "license" Json.Decode.string 
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "creator" Json.Decode.string Nothing
        |> maybeDecode "mediaType"  Nothing
        |> maybeDecode "parents" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "keywordsClosed" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "keywordsOpen" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "tags" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "recordType" mediaRecordRecordTypeDecoder Nothing
        |> maybeDecode "creationDate" Api.Time.dateDecoder Nothing
        |> maybeDecode "modifiedDate" Api.Time.dateDecoder Nothing
        |> maybeDecode "mediaDate" Api.Time.dateDecoder Nothing
        |> maybeDecode "connections" (Json.Decode.list connectionDecoder) Nothing


mediaRecordTranscodingStatusDecoder : Json.Decode.Decoder MediaRecordTranscodingStatus
mediaRecordTranscodingStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "noFile" ->
                        Json.Decode.succeed MediaRecordTranscodingStatusNoFile

                    "inProgress" ->
                        Json.Decode.succeed MediaRecordTranscodingStatusInProgress

                    "failed" ->
                        Json.Decode.succeed MediaRecordTranscodingStatusFailed

                    "transcoded" ->
                        Json.Decode.succeed MediaRecordTranscodingStatusTranscoded

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



mediaRecordMediaTypeDecoder : Json.Decode.Decoder MediaRecordMediaType
mediaRecordMediaTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "video" ->
                        Json.Decode.succeed MediaRecordMediaTypeVideo

                    "audio" ->
                        Json.Decode.succeed MediaRecordMediaTypeAudio

                    "image" ->
                        Json.Decode.succeed MediaRecordMediaTypeImage

                    "svg" ->
                        Json.Decode.succeed MediaRecordMediaTypeSvg

                    "pdf" ->
                        Json.Decode.succeed MediaRecordMediaTypePdf

                    "text" ->
                        Json.Decode.succeed MediaRecordMediaTypeText

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



mediaRecordRecordTypeDecoder : Json.Decode.Decoder MediaRecordRecordType
mediaRecordRecordTypeDecoder =
    Json.Decode.succeed MediaRecordRecordType
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "metadata" objectDecoder Nothing


mediaRecordTextDecoder : Json.Decode.Decoder MediaRecordText
mediaRecordTextDecoder =
    Json.Decode.succeed MediaRecordText
        |> maybeDecode "textType"  Nothing
        |> maybeDecode "content" Json.Decode.string Nothing


mediaRecordTextTextTypeDecoder : Json.Decode.Decoder MediaRecordTextTextType
mediaRecordTextTextTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "markdown" ->
                        Json.Decode.succeed MediaRecordTextTextTypeMarkdown

                    "altText" ->
                        Json.Decode.succeed MediaRecordTextTextTypeAltText

                    "html" ->
                        Json.Decode.succeed MediaRecordTextTextTypeHtml

                    "plain" ->
                        Json.Decode.succeed MediaRecordTextTextTypePlain

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



multiLangStringDecoder : Json.Decode.Decoder MultiLangString
multiLangStringDecoder =
    Json.Decode.succeed MultiLangString
        |> decode "lang" Json.Decode.string 
        |> decode "value" Json.Decode.string 


objectPointerDecoder : Json.Decode.Decoder ObjectPointer
objectPointerDecoder =
    Json.Decode.succeed ObjectPointer
        |> decode "objectType"  
        |> decode "id" Json.Decode.string 
        |> maybeDecode "pointer" objectPointerPointerDecoder Nothing


objectPointerObjectTypeDecoder : Json.Decode.Decoder ObjectPointerObjectType
objectPointerObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "mediaRecord" ->
                        Json.Decode.succeed ObjectPointerObjectTypeMediaRecord

                    "exposition" ->
                        Json.Decode.succeed ObjectPointerObjectTypeExposition

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



objectPointerPointerDecoder : Json.Decode.Decoder ObjectPointerPointer
objectPointerPointerDecoder =
    Json.Decode.succeed ObjectPointerPointer
        |> maybeDecode "timePointer" timePointerDecoder Nothing
        |> maybeDecode "twoDPointer" twoDPointerDecoder Nothing
        |> maybeDecode "counterPointer" counterPointerDecoder Nothing
        |> maybeDecode "channelPointer" channelPointerDecoder Nothing


openVocabularyTermDecoder : Json.Decode.Decoder OpenVocabularyTerm
openVocabularyTermDecoder =
    Json.Decode.succeed OpenVocabularyTerm
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "term" Json.Decode.string 


predicateDecoder : Json.Decode.Decoder Predicate
predicateDecoder =
    Json.Decode.succeed Predicate
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "predicate" Json.Decode.string 
        |> maybeDecode "uri" Json.Decode.string Nothing


problemWithRCObjectDecoder : Json.Decode.Decoder ProblemWithRCObject
problemWithRCObjectDecoder =
    Json.Decode.succeed ProblemWithRCObject
        |> decode "objectType"  
        |> decode "id" Json.Decode.string 
        |> decode "problem"  


problemWithRCObjectObjectTypeDecoder : Json.Decode.Decoder ProblemWithRCObjectObjectType
problemWithRCObjectObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "mediaRecord" ->
                        Json.Decode.succeed ProblemWithRCObjectObjectTypeMediaRecord

                    "exposition" ->
                        Json.Decode.succeed ProblemWithRCObjectObjectTypeExposition

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



problemWithRCObjectProblemDecoder : Json.Decode.Decoder ProblemWithRCObjectProblem
problemWithRCObjectProblemDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "does not exist" ->
                        Json.Decode.succeed ProblemWithRCObjectProblemDoesNotExist

                    "insufficient permissions" ->
                        Json.Decode.succeed ProblemWithRCObjectProblemInsufficientPermissions

                    "conflict" ->
                        Json.Decode.succeed ProblemWithRCObjectProblemConflict

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



searchRequestDecoder : Json.Decode.Decoder SearchRequest
searchRequestDecoder =
    Json.Decode.succeed SearchRequest
        |> maybeDecode "creator" Json.Decode.string Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "mediaType"  Nothing
        |> maybeDecode "recordType" Json.Decode.string Nothing
        |> maybeDecode "creationDate" dateRangeDecoder Nothing
        |> maybeDecode "modificationDate" dateRangeDecoder Nothing
        |> maybeDecode "date" dateRangeDecoder Nothing
        |> maybeDecode "license" Json.Decode.string Nothing
        |> maybeDecode "copyright" Json.Decode.string Nothing
        |> maybeDecode "tag" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "keywordsClosed" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "keywordsOpen" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "textContent" Json.Decode.string Nothing
        |> maybeDecode "connectedTo" (Json.Decode.list Json.Decode.string) Nothing


searchRequestMediaTypeDecoder : Json.Decode.Decoder SearchRequestMediaType
searchRequestMediaTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "video" ->
                        Json.Decode.succeed SearchRequestMediaTypeVideo

                    "audio" ->
                        Json.Decode.succeed SearchRequestMediaTypeAudio

                    "image" ->
                        Json.Decode.succeed SearchRequestMediaTypeImage

                    "svg" ->
                        Json.Decode.succeed SearchRequestMediaTypeSvg

                    "pdf" ->
                        Json.Decode.succeed SearchRequestMediaTypePdf

                    "text" ->
                        Json.Decode.succeed SearchRequestMediaTypeText

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



shareStatusDecoder : Json.Decode.Decoder ShareStatus
shareStatusDecoder =
    Json.Decode.succeed ShareStatus
        |> decode "read" shareStatusReadDecoder 
        |> decode "write" shareStatusWriteDecoder 


shareStatusReadDecoder : Json.Decode.Decoder ShareStatusRead
shareStatusReadDecoder =
    Json.Decode.succeed ShareStatusRead
        |> decode "users" (Json.Decode.list Json.Decode.string) 
        |> decode "public" Json.Decode.bool 


shareStatusWriteDecoder : Json.Decode.Decoder ShareStatusWrite
shareStatusWriteDecoder =
    Json.Decode.succeed ShareStatusWrite
        |> decode "users" (Json.Decode.list Json.Decode.string) 


storageUsageDecoder : Json.Decode.Decoder StorageUsage
storageUsageDecoder =
    Json.Decode.succeed StorageUsage
        |> decode "used" Json.Decode.float 


textExpositionDecoder : Json.Decode.Decoder TextExposition
textExpositionDecoder =
    Json.Decode.succeed TextExposition
        |> decode "pages" (Json.Decode.list textExpositionPageDecoder) 
        |> decode "toolMeta" (Json.Decode.list textExpositionToolMetaDecoder) 
        |> decode "title" Json.Decode.string 
        |> decode "style" Json.Decode.string 
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "editorVersion" Json.Decode.string 
        |> decode "contentVersion" Json.Decode.int 
        |> decode "toc" (Json.Decode.list textExpositionTocEntryDecoder) 


textExpositionPageDecoder : Json.Decode.Decoder TextExpositionPage
textExpositionPageDecoder =
    Json.Decode.succeed TextExpositionPage
        |> decode "title" Json.Decode.string 
        |> decode "html" Json.Decode.string 
        |> decode "markdown" Json.Decode.string 
        |> maybeDecode "pageId" Json.Decode.int Nothing


textExpositionTocEntryDecoder : Json.Decode.Decoder TextExpositionTocEntry
textExpositionTocEntryDecoder =
    Json.Decode.succeed TextExpositionTocEntry
        |> decode "level" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "id" Json.Decode.string 
        |> decode "page" Json.Decode.int 


textExpositionToolMetaDecoder : Json.Decode.Decoder TextExpositionToolMeta
textExpositionToolMetaDecoder =
    Json.Decode.succeed TextExpositionToolMeta
        |> decode "mediaId" Json.Decode.string 
        |> maybeDecode "caption" Json.Decode.string Nothing
        |> maybeDecode "userClass" Json.Decode.string Nothing


timePointerDecoder : Json.Decode.Decoder TimePointer
timePointerDecoder =
    Json.Decode.succeed TimePointer
        |> decode "hours" Json.Decode.int 
        |> decode "minutes" Json.Decode.int 
        |> decode "seconds" Json.Decode.int 
        |> decode "milliseconds" Json.Decode.int 


twoDPointerDecoder : Json.Decode.Decoder TwoDPointer
twoDPointerDecoder =
    Json.Decode.succeed TwoDPointer
        |> decode "unit"  
        |> decode "x" Json.Decode.float 
        |> decode "y" Json.Decode.float 


twoDPointerUnitDecoder : Json.Decode.Decoder TwoDPointerUnit
twoDPointerUnitDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "perc" ->
                        Json.Decode.succeed TwoDPointerUnitPerc

                    "pixel" ->
                        Json.Decode.succeed TwoDPointerUnitPixel

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



vocabularyTermDecoder : Json.Decode.Decoder VocabularyTerm
vocabularyTermDecoder =
    Json.Decode.succeed VocabularyTerm
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "externalURI" Json.Decode.string Nothing
        |> decode "terms" (Json.Decode.list multiLangStringDecoder) 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f