{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.User exposing (deleteConnection, getConnections, getMedia, getMediaChildren, getMediaFile, getMediaIndex, getMediaThumb, getPredicates, getShareStatus, postConnection, postMedia, putConnection, putMedia, putMediaFile, putMediaThumb, putShareStatus)

import Data.ProblemWithRCObject as ProblemWithRCObject exposing (ProblemWithRCObject)
import Data.MediaRecord as MediaRecord exposing (MediaRecord)
import Data.Connection as Connection exposing (Connection)
import Data.ShareStatus as ShareStatus exposing (ShareStatus)
import Data.Predicate as Predicate exposing (Predicate)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "http://localhost"


deleteConnection :
    { onSend : Result Http.Error () -> msg



    , connectionId : String

    }
    -> Cmd msg
deleteConnection params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["connection", identity params.connectionId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


getConnections :
    { onSend : Result Http.Error (List Connection) -> msg



    , mediaId : String

    }
    -> Cmd msg
getConnections params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "connections"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list Connection.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getMedia :
    { onSend : Result Http.Error MediaRecord -> msg



    , mediaId : String

    }
    -> Cmd msg
getMedia params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend MediaRecord.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


getMediaChildren :
    { onSend : Result Http.Error (List MediaRecord) -> msg



    , mediaId : String

    }
    -> Cmd msg
getMediaChildren params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "children"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list MediaRecord.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getMediaFile :
    { onSend : Result Http.Error String -> msg



    , mediaId : String

    }
    -> Cmd msg
getMediaFile params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "file"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Decode.string
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Get all media accessible to user based on id. User is is derived from token. 
-}
getMediaIndex :
    { onSend : Result Http.Error (List MediaRecord) -> msg





    }
    -> Cmd msg
getMediaIndex params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", "index"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list MediaRecord.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getMediaThumb :
    { onSend : Result Http.Error String -> msg



    , mediaId : String

    }
    -> Cmd msg
getMediaThumb params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "thumb"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Decode.string
        , timeout = Just 30000
        , tracker = Nothing
        }


getPredicates :
    { onSend : Result Http.Error (List Predicate) -> msg





    }
    -> Cmd msg
getPredicates params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["predicates"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list Predicate.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getShareStatus :
    { onSend : Result Http.Error ShareStatus -> msg



    , mediaId : String

    }
    -> Cmd msg
getShareStatus params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "shareStatus"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend ShareStatus.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


postConnection :
    { onSend : Result Http.Error () -> msg


    , body : Maybe Connection


    }
    -> Cmd msg
postConnection params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["connection"]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << Connection.encode) params.body
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Upload a media file, providing the required fields returns the id of the media. A ShareStatus object is created automatically for this media record.  
-}
postMedia :
    { onSend : Result Http.Error MediaRecord -> msg





    }
    -> Cmd msg
postMedia params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend MediaRecord.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


putConnection :
    { onSend : Result Http.Error () -> msg


    , body : Maybe Connection
    , connectionId : String

    }
    -> Cmd msg
putConnection params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["connection", identity params.connectionId]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << Connection.encode) params.body
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


putMedia :
    { onSend : Result Http.Error MediaRecord -> msg


    , body : Maybe MediaRecord
    , mediaId : String

    }
    -> Cmd msg
putMedia params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << MediaRecord.encode) params.body
        , expect = Http.expectJson params.onSend MediaRecord.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


putMediaFile :
    { onSend : Result Http.Error () -> msg



    , mediaId : String

    }
    -> Cmd msg
putMediaFile params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "file"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


putMediaThumb :
    { onSend : Result Http.Error () -> msg


    , body : Maybe String
    , mediaId : String

    }
    -> Cmd msg
putMediaThumb params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "thumb"]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << Encode.string) params.body
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


putShareStatus :
    { onSend : Result Http.Error ShareStatus -> msg


    , body : Maybe ShareStatus
    , mediaId : String

    }
    -> Cmd msg
putShareStatus params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId, "shareStatus"]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << ShareStatus.encode) params.body
        , expect = Http.expectJson params.onSend ShareStatus.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
