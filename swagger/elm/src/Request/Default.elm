{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Default exposing (deleteKeywordsOpen, deleteTag, getKeywordsClosed, getKeywordsOpen, getTags, getTypes, getTypesSchema, mediaMediaIdDelete, postKeywordsClosed, postKeywordsOpen, postTag, putKeywordsClosed)

import Data.OpenVocabularyTerm as OpenVocabularyTerm exposing (OpenVocabularyTerm)
import Data.VocabularyTerm as VocabularyTerm exposing (VocabularyTerm)
import Data.Object as Object exposing (Object)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "http://localhost"


deleteKeywordsOpen :
    { onSend : Result Http.Error () -> msg



    , openKeywordId : String

    }
    -> Cmd msg
deleteKeywordsOpen params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["keywords", "open", identity params.openKeywordId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


deleteTag :
    { onSend : Result Http.Error () -> msg



    , tagId : String

    }
    -> Cmd msg
deleteTag params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["tags", identity params.tagId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


getKeywordsClosed :
    { onSend : Result Http.Error (List VocabularyTerm) -> msg





    }
    -> Cmd msg
getKeywordsClosed params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["keywords", "closed"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list VocabularyTerm.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getKeywordsOpen :
    { onSend : Result Http.Error (List OpenVocabularyTerm) -> msg




    , startingWith : Maybe (String)    , limit : Maybe (Int)
    }
    -> Cmd msg
getKeywordsOpen params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["keywords", "open"]
            (List.filterMap identity [Maybe.map (Url.string "startingWith" << identity) params.startingWith, Maybe.map (Url.string "limit" << String.fromInt) params.limit])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list OpenVocabularyTerm.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getTags :
    { onSend : Result Http.Error (List OpenVocabularyTerm) -> msg





    }
    -> Cmd msg
getTags params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["tags"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list OpenVocabularyTerm.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


getTypes :
    { onSend : Result Http.Error (List String) -> msg





    }
    -> Cmd msg
getTypes params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["types"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list Decode.string)
        , timeout = Just 30000
        , tracker = Nothing
        }


getTypesSchema :
    { onSend : Result Http.Error Object -> msg



    , schemaId : String

    }
    -> Cmd msg
getTypesSchema params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["types", "schema", identity params.schemaId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Object.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| deletes a media record and also the respective share status object.  It cannot be deleted if media record is used in exposition. 
-}
mediaMediaIdDelete :
    { onSend : Result Http.Error () -> msg



    , mediaId : String

    }
    -> Cmd msg
mediaMediaIdDelete params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["media", identity params.mediaId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


postKeywordsClosed :
    { onSend : Result Http.Error VocabularyTerm -> msg


    , body : Maybe VocabularyTerm


    }
    -> Cmd msg
postKeywordsClosed params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["keywords", "closed"]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << VocabularyTerm.encode) params.body
        , expect = Http.expectJson params.onSend VocabularyTerm.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


postKeywordsOpen :
    { onSend : Result Http.Error OpenVocabularyTerm -> msg


    , body : Maybe String


    }
    -> Cmd msg
postKeywordsOpen params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["keywords", "open"]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << Encode.string) params.body
        , expect = Http.expectJson params.onSend OpenVocabularyTerm.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


postTag :
    { onSend : Result Http.Error OpenVocabularyTerm -> msg


    , body : Maybe String


    }
    -> Cmd msg
postTag params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["tags"]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << Encode.string) params.body
        , expect = Http.expectJson params.onSend OpenVocabularyTerm.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


putKeywordsClosed :
    { onSend : Result Http.Error () -> msg


    , body : Maybe VocabularyTerm
    , keywordId : String

    }
    -> Cmd msg
putKeywordsClosed params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["keywords", "closed", identity params.keywordId]
            (List.filterMap identity [])
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << VocabularyTerm.encode) params.body
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }
