{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.MediaRecordType exposing (MediaRecordType, decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| type obtained from the portfolio API ...
-}
type alias MediaRecordType =
    { id : Maybe (String)
    , metadata : Maybe (Object)
    }


decoder : Decoder MediaRecordType
decoder =
    Decode.succeed MediaRecordType
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "metadata" (Decode.nullable Object.decoder) Nothing



encode : MediaRecordType -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> MediaRecordType -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : MediaRecordType -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "metadata", Maybe.withDefault Encode.null (Maybe.map Object.encode model.metadata) )
    ]



toString : MediaRecordType -> String
toString =
    Encode.encode 0 << encode




