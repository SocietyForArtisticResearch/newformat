{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.ProblemWithRCObject exposing (ProblemWithRCObject, ObjectType(..), Problem(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Problem with an expositon or media record
-}
type alias ProblemWithRCObject =
    { objectType : ObjectType
    , id : String
    , problem : Problem
    }


type ObjectType
    = MediaRecord
    | Exposition



type Problem
    = DoesNotExist
    | InsufficientPermissions
    | Conflict



decoder : Decoder ProblemWithRCObject
decoder =
    Decode.succeed ProblemWithRCObject
        |> required "objectType" objectTypeDecoder
        |> required "id" Decode.string
        |> required "problem" problemDecoder



encode : ProblemWithRCObject -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> ProblemWithRCObject -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : ProblemWithRCObject -> List (String, Encode.Value)
encodePairs model =
    [ ( "objectType", encodeObjectType model.objectType )
    , ( "id", Encode.string model.id )
    , ( "problem", encodeProblem model.problem )
    ]



toString : ProblemWithRCObject -> String
toString =
    Encode.encode 0 << encode




objectTypeDecoder : Decoder ObjectType
objectTypeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "mediaRecord" ->
                        Decode.succeed MediaRecord

                    "exposition" ->
                        Decode.succeed Exposition

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeObjectType : ObjectType -> Encode.Value
encodeObjectType model =
    case model of
        MediaRecord ->
            Encode.string "mediaRecord"

        Exposition ->
            Encode.string "exposition"




problemDecoder : Decoder Problem
problemDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "does not exist" ->
                        Decode.succeed DoesNotExist

                    "insufficient permissions" ->
                        Decode.succeed InsufficientPermissions

                    "conflict" ->
                        Decode.succeed Conflict

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeProblem : Problem -> Encode.Value
encodeProblem model =
    case model of
        DoesNotExist ->
            Encode.string "does not exist"

        InsufficientPermissions ->
            Encode.string "insufficient permissions"

        Conflict ->
            Encode.string "conflict"




