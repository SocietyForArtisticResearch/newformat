{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.CounterPointer exposing (CounterPointer, CounterType(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias CounterPointer =
    { counterType : CounterType
    , counter : Int
    }


type CounterType
    = Character
    | Byte
    | Page



decoder : Decoder CounterPointer
decoder =
    Decode.succeed CounterPointer
        |> required "counterType" counterTypeDecoder
        |> required "counter" Decode.int



encode : CounterPointer -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> CounterPointer -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : CounterPointer -> List (String, Encode.Value)
encodePairs model =
    [ ( "counterType", encodeCounterType model.counterType )
    , ( "counter", Encode.int model.counter )
    ]



toString : CounterPointer -> String
toString =
    Encode.encode 0 << encode




counterTypeDecoder : Decoder CounterType
counterTypeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "character" ->
                        Decode.succeed Character

                    "byte" ->
                        Decode.succeed Byte

                    "page" ->
                        Decode.succeed Page

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeCounterType : CounterType -> Encode.Value
encodeCounterType model =
    case model of
        Character ->
            Encode.string "character"

        Byte ->
            Encode.string "byte"

        Page ->
            Encode.string "page"




