{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.TwoDPointer exposing (TwoDPointer, Unit(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias TwoDPointer =
    { unit : Unit
    , x : Float
    , y : Float
    }


type Unit
    = Perc
    | Pixel



decoder : Decoder TwoDPointer
decoder =
    Decode.succeed TwoDPointer
        |> required "unit" unitDecoder
        |> required "x" Decode.float
        |> required "y" Decode.float



encode : TwoDPointer -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> TwoDPointer -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : TwoDPointer -> List (String, Encode.Value)
encodePairs model =
    [ ( "unit", encodeUnit model.unit )
    , ( "x", Encode.float model.x )
    , ( "y", Encode.float model.y )
    ]



toString : TwoDPointer -> String
toString =
    Encode.encode 0 << encode




unitDecoder : Decoder Unit
unitDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "perc" ->
                        Decode.succeed Perc

                    "pixel" ->
                        Decode.succeed Pixel

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeUnit : Unit -> Encode.Value
encodeUnit model =
    case model of
        Perc ->
            Encode.string "perc"

        Pixel ->
            Encode.string "pixel"




