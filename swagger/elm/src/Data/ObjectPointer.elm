{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.ObjectPointer exposing (ObjectPointer, ObjectType(..), decoder, encode, encodeWithTag, toString)

import Data.ObjectPointerPointer as ObjectPointerPointer exposing (ObjectPointerPointer)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias ObjectPointer =
    { objectType : ObjectType
    , id : String
    , pointer : ObjectPointerPointer
    }


type ObjectType
    = MediaRecord
    | Exposition



decoder : Decoder ObjectPointer
decoder =
    Decode.succeed ObjectPointer
        |> required "objectType" objectTypeDecoder
        |> required "id" Decode.string
        |> required "pointer" ObjectPointerPointer.decoder



encode : ObjectPointer -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> ObjectPointer -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : ObjectPointer -> List (String, Encode.Value)
encodePairs model =
    [ ( "objectType", encodeObjectType model.objectType )
    , ( "id", Encode.string model.id )
    , ( "pointer", ObjectPointerPointer.encode model.pointer )
    ]



toString : ObjectPointer -> String
toString =
    Encode.encode 0 << encode




objectTypeDecoder : Decoder ObjectType
objectTypeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "mediaRecord" ->
                        Decode.succeed MediaRecord

                    "exposition" ->
                        Decode.succeed Exposition

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeObjectType : ObjectType -> Encode.Value
encodeObjectType model =
    case model of
        MediaRecord ->
            Encode.string "mediaRecord"

        Exposition ->
            Encode.string "exposition"




