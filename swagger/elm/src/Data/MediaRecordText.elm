{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.MediaRecordText exposing (MediaRecordText, TextType(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias MediaRecordText =
    { textType : Maybe (TextType)
    , content : Maybe (String)
    }


type TextType
    = Markdown
    | AltText
    | Html
    | Plain



decoder : Decoder MediaRecordText
decoder =
    Decode.succeed MediaRecordText
        |> optional "textType" (Decode.nullable textTypeDecoder) Nothing
        |> optional "content" (Decode.nullable Decode.string) Nothing



encode : MediaRecordText -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> MediaRecordText -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : MediaRecordText -> List (String, Encode.Value)
encodePairs model =
    [ ( "textType", Maybe.withDefault Encode.null (Maybe.map encodeTextType model.textType) )
    , ( "content", Maybe.withDefault Encode.null (Maybe.map Encode.string model.content) )
    ]



toString : MediaRecordText -> String
toString =
    Encode.encode 0 << encode




textTypeDecoder : Decoder TextType
textTypeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "markdown" ->
                        Decode.succeed Markdown

                    "altText" ->
                        Decode.succeed AltText

                    "html" ->
                        Decode.succeed Html

                    "plain" ->
                        Decode.succeed Plain

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeTextType : TextType -> Encode.Value
encodeTextType model =
    case model of
        Markdown ->
            Encode.string "markdown"

        AltText ->
            Encode.string "altText"

        Html ->
            Encode.string "html"

        Plain ->
            Encode.string "plain"




