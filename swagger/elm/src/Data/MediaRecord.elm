{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.MediaRecord exposing (MediaRecord, MediaType(..), decoder, encode, encodeWithTag, toString)

import Data.MediaRecordText as MediaRecordText exposing (MediaRecordText)
import Data.MediaRecordType as MediaRecordType exposing (MediaRecordType)
import DateOnly exposing (DateOnly)
import DateOnly exposing (DateOnly)
import Data.Connection as Connection exposing (Connection)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias MediaRecord =
    { id : Maybe (String)
    , text : Maybe (MediaRecordText)
    , title : String
    , copyright : String
    , license : String
    , description : Maybe (String)
    , creator : Maybe (String)
    , mediaType : Maybe (MediaType)
    , parents : Maybe ((List String))
    , keywordsClosed : Maybe ((List String))
    , keywordsOpen : Maybe ((List String))
    , tags : Maybe ((List String))
    , type_ : Maybe (MediaRecordType)
    , creationDate : Maybe (DateOnly)
    , modifiedDate : Maybe (DateOnly)
    , connections : Maybe ((List Connection))
    }


type MediaType
    = Video
    | Audio
    | Image
    | Svg
    | Pdf
    | Text



decoder : Decoder MediaRecord
decoder =
    Decode.succeed MediaRecord
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "text" (Decode.nullable MediaRecordText.decoder) Nothing
        |> required "title" Decode.string
        |> required "copyright" Decode.string
        |> required "license" Decode.string
        |> optional "description" (Decode.nullable Decode.string) Nothing
        |> optional "creator" (Decode.nullable Decode.string) Nothing
        |> optional "mediaType" (Decode.nullable mediaTypeDecoder) Nothing
        |> optional "parents" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "keywordsClosed" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "keywordsOpen" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "tags" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "type" (Decode.nullable MediaRecordType.decoder) Nothing
        |> optional "creationDate" (Decode.nullable DateOnly.decoder) Nothing
        |> optional "modifiedDate" (Decode.nullable DateOnly.decoder) Nothing
        |> optional "connections" (Decode.nullable (Decode.list Connection.decoder)) Nothing



encode : MediaRecord -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> MediaRecord -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : MediaRecord -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "text", Maybe.withDefault Encode.null (Maybe.map MediaRecordText.encode model.text) )
    , ( "title", Encode.string model.title )
    , ( "copyright", Encode.string model.copyright )
    , ( "license", Encode.string model.license )
    , ( "description", Maybe.withDefault Encode.null (Maybe.map Encode.string model.description) )
    , ( "creator", Maybe.withDefault Encode.null (Maybe.map Encode.string model.creator) )
    , ( "mediaType", Maybe.withDefault Encode.null (Maybe.map encodeMediaType model.mediaType) )
    , ( "parents", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.parents) )
    , ( "keywordsClosed", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.keywordsClosed) )
    , ( "keywordsOpen", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.keywordsOpen) )
    , ( "tags", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.tags) )
    , ( "type", Maybe.withDefault Encode.null (Maybe.map MediaRecordType.encode model.type_) )
    , ( "creationDate", Maybe.withDefault Encode.null (Maybe.map DateOnly.encode model.creationDate) )
    , ( "modifiedDate", Maybe.withDefault Encode.null (Maybe.map DateOnly.encode model.modifiedDate) )
    , ( "connections", Maybe.withDefault Encode.null (Maybe.map (Encode.list Connection.encode) model.connections) )
    ]



toString : MediaRecord -> String
toString =
    Encode.encode 0 << encode




mediaTypeDecoder : Decoder MediaType
mediaTypeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "video" ->
                        Decode.succeed Video

                    "audio" ->
                        Decode.succeed Audio

                    "image" ->
                        Decode.succeed Image

                    "svg" ->
                        Decode.succeed Svg

                    "pdf" ->
                        Decode.succeed Pdf

                    "text" ->
                        Decode.succeed Text

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeMediaType : MediaType -> Encode.Value
encodeMediaType model =
    case model of
        Video ->
            Encode.string "video"

        Audio ->
            Encode.string "audio"

        Image ->
            Encode.string "image"

        Svg ->
            Encode.string "svg"

        Pdf ->
            Encode.string "pdf"

        Text ->
            Encode.string "text"




