{-
   Media Repository API
   This is the Research Catalouge Media Repository API

   The version of the OpenAPI document: 1.0.0-oas3
   Contact: support@researchcatalogue.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.VocabularyTerm exposing (VocabularyTerm, decoder, encode, encodeWithTag, toString)

import Data.MultiLangString as MultiLangString exposing (MultiLangString)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| a term from a closed vocabulary
-}
type alias VocabularyTerm =
    { id : Maybe (String)
    , externalURI : Maybe (String)
    , terms : (List MultiLangString)
    }


decoder : Decoder VocabularyTerm
decoder =
    Decode.succeed VocabularyTerm
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "externalURI" (Decode.nullable Decode.string) Nothing
        |> required "terms" (Decode.list MultiLangString.decoder)



encode : VocabularyTerm -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> VocabularyTerm -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : VocabularyTerm -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "externalURI", Maybe.withDefault Encode.null (Maybe.map Encode.string model.externalURI) )
    , ( "terms", (Encode.list MultiLangString.encode) model.terms )
    ]



toString : VocabularyTerm -> String
toString =
    Encode.encode 0 << encode




